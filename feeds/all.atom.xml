<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Breaking Bytes</title><link href="https://breakingbytes.github.io/" rel="alternate"></link><link href="https://breakingbytes.github.io/feeds/all.atom.xml" rel="self"></link><id>https://breakingbytes.github.io/</id><updated>2019-10-07T10:33:00-07:00</updated><entry><title>Python Concurrency Primer</title><link href="https://breakingbytes.github.io/python-concurrency-primer.html" rel="alternate"></link><published>2019-10-07T10:33:00-07:00</published><updated>2019-10-07T10:33:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2019-10-07:/python-concurrency-primer.html</id><summary type="html">&lt;p&gt;Asynchronous Python workflows for IO and CPU processes on a single machine versus a cluster.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Python Threading versus Multiprocessing&lt;/h1&gt;
&lt;p&gt;Threading works really well with IO, but not CPU bound processes, hence why there's an asyncio lib (https://docs.python.org/3/library/asyncio.html) for IO and a MP lib (https://docs.python.org/3/library/multiprocessing.html). Before Py3, you could manually create threads using the threading lib (https://docs.python.org/3/library/threading.html) and some people don't like asyncio and prefer external libs like trio (https://trio.readthedocs.io/en/stable/) and older packages like &lt;a href="http://www.gevent.org/"&gt;gevents&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;For an example of using threading for an IO bound process see the &lt;code&gt;pvlib.iotools.get_ecmwf_macc()&lt;/code&gt; method (https://github.com/pvlib/pvlib-python/blob/master/pvlib/iotools/ecmwf_macc.py#L168) which returns the thread that calls the ECMWF api client because it is soooooo slow!&lt;/p&gt;
&lt;h1&gt;Concurrency in the Cloud&lt;/h1&gt;
&lt;p&gt;Curve ball (⚾) - threading and MP work great for a single computer, but when you are on a cluster, such as web applications, then you have more options!
​
In a web app, you usually have a load balancer in front of several workers who answer get requests.&lt;/p&gt;
&lt;p&gt;Therefore you can deligate the work for both IO and CPU bound processes differently than by using either threading, MP, asyncio, trio, gevent, etc&lt;/p&gt;
&lt;p&gt;Celery (http://www.celeryproject.org/) is probably the most popular task queue for distributed resources especially for web applications&lt;/p&gt;
&lt;p&gt;I would guess there are task managers other than Celery, but would have to Google around to find a curated list - and many examples recommend Celery, eg: Heroku (https://devcenter.heroku.com/articles/celery-heroku)&lt;/p&gt;
&lt;h1&gt;Inter-Process Communication&lt;/h1&gt;
&lt;p&gt;Note a task queue, threading, and MP all require a way to communicate with the thread, this is called IPC or inter-process communication (https://en.wikipedia.org/wiki/Inter-process_communication)&lt;/p&gt;
&lt;p&gt;For threads and MP, I typically use a Queue (https://docs.python.org/3/library/queue.html) but there are other options&lt;/p&gt;
&lt;p&gt;For distributed computing, the recommendation is to use a message queue like RabbitMQ (https://www.rabbitmq.com/) or a shared memory server like memcached (https://memcached.org/) or reddis (https://redis.io/)&lt;/p&gt;
&lt;p&gt;Unfortunately, I don't have the expertise to say when to use an MQ verses memcache, but there are lots of articles on the internet discussing the pros/cons of each. I've used memcache and it works, but I believe for Celery they preffer MQ.&lt;/p&gt;
&lt;h1&gt;The Difference Between IO and CPU Bound Process&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An IO bound process is like getting data from a URL, or writing a file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CPU bound process is like a big calculation like matrix inversion, a search routine, or optimization/minimzation problem&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IO bound processes use Threads because threads do not block IO bound processes - IE: you can start an IO process in a thread and execution will continue to the next line unless you tell Python to wait. AsyncIO and Trio probably use threading in the background, IDK for sure.&lt;/p&gt;
&lt;p&gt;CPU bound processes use MP, because they need their own core to do their stuff. But unfortunately there is a lot of overhead with MP, and so the calculation needs to be really expensive to make it worthwhile.&lt;/p&gt;
&lt;p&gt;There's no limit to the number of threads you can create, but the number of MP processes is limited to the number of cores.&lt;/p&gt;
&lt;p&gt;These rules don't apply to distributed computing, and they may not apply in other computing languages either. IE: you can distribute both IO and CPU tasks to a task queue across a cluster. However, there may be task managers that are better suited for different types of tasks. EG: Dask (https://dask.org/) is probably better for distributed computing of CPU intense processes. But honestly, IDK, I'm at the edge of my personal research and experience here, and so I would probably recommend a little more exploration ...&lt;/p&gt;
&lt;h1&gt;Python Global Interpreter Lock&lt;/h1&gt;
&lt;p&gt;The reason there's this difference between IO/CPU and threads/processes in Python specifically, and perhaps not other languages, is because Python is single threaded by default due to the Global Interpreter Lock or GIL (https://wiki.python.org/moin/GlobalInterpreterLock). Other languages may or may not have similar design, IDK, however Python C-API does let you explicitly release the GIL (https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock) and manage threads manually. This is what packages like NumPy/SciPy (https://scipy-cookbook.readthedocs.io/items/ParallelProgramming.html) CPython (https://cython.readthedocs.io/en/latest/src/userguide/parallelism.html) do.&lt;/p&gt;</content><category term="code"></category><category term="web"></category></entry><entry><title>Examples of implicit versus explicit solutions for photovoltaic solar energy systems</title><link href="https://breakingbytes.github.io/examples-of-implicit-versus-explicit-solutions-for-photovoltaic-solar-energy-systems.html" rel="alternate"></link><published>2018-06-22T20:55:00-07:00</published><updated>2018-06-22T20:55:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2018-06-22:/examples-of-implicit-versus-explicit-solutions-for-photovoltaic-solar-energy-systems.html</id><summary type="html">&lt;p&gt;Using a numerical solver to model solar power.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Full Scale PV Modeling&lt;/h1&gt;
&lt;p&gt;I want to explore different ways to find the operating conditions for max power
of a PV system. I'm going to assume that we're using a single diode model (SDM)
which is an analog curcuit of a solar cell composed from a current source, a
diode, and a resistance in parallel, in series with another resistance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="single diode model" src="https://pvpmc.sandia.gov/wp-content/uploads/2012/04/Single-Diode-EC2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source: &lt;a href="https://pvpmc.sandia.gov/"&gt;Sandia National Labs: PV Performance Modeling Collaborative&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The cell current in the SDM can't be solved explicitly as a function of cell
voltage without using the Lambert-W function. It can be solved implicitly by
using an iterative solver such as a gradient descent method. And there is an
explicit method that can be used to solve for cell current as a function of an
intermediate parameter, the diode voltage, which can then be used to calculate
the cell current. To get a specific voltage using this explicit parameterized
approach, requires solving for several diode voltages and interpolating.&lt;/p&gt;
&lt;p&gt;A common use of the SDM is to solve for the ideal operating condition of an
entire PV system by assuming all of the cells are identical. Another proposed
usage of the SDM is to model all of the cells in an entire system to account
for their differences either due to variance in manufacturing, ambient
conditions, or degradation. This second problem poses some challenges
computationally for very large systems.&lt;/p&gt;
&lt;p&gt;What is the best method to do full scale PV system modeling? I'm going to skip
the Lambert-W function and focus on implict and explicit methods.&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The implicit approach is efficient at finding a single operating condition,
even or especially when most of the cells are different, but it's slow at
tracing the entire IV curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The implicit approach is also efficient at determining the max power point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nesting search methods is less efficient than a single closed solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The explicit method is most efficient at tracing the entire IV curve, even
when every cell is different.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Gist&lt;/h1&gt;
&lt;p&gt;The following Gist contains examples for a full scale implicit approach and the
explicit parameterized approach described. The Gist are best viewed on
&lt;a href="http://nbviewer.jupyter.org/gist/mikofski/df318d1f892767ac7c762e732fecaa7f"&gt;nbviewer&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/mikofski/df318d1f892767ac7c762e732fecaa7f.js"&gt;&lt;/script&gt;</content><category term="code"></category><category term="solar"></category></entry><entry><title>SPACES: Mnemonic for core values of good modeling software</title><link href="https://breakingbytes.github.io/spaces-mnemonic-for-core-values-of-good-modeling-software.html" rel="alternate"></link><published>2018-05-10T00:14:00-07:00</published><updated>2018-05-10T00:14:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2018-05-10:/spaces-mnemonic-for-core-values-of-good-modeling-software.html</id><summary type="html">&lt;p&gt;What makes good modeling software? Repeat this three times out loud.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Modeling&lt;/h1&gt;
&lt;p&gt;Mathematical models of scientific phenomena are essential in engineering. We
use them to design experiments and select instruments based on estimates of the
sensitivities of relationships between factors. We derive models from the
experimental results and use them to develop more predictive models. Sometimes
we can use models to reorganize experimental results to fit into the context of
our understanding of the physical world, and sometimes this leads to the
discovery of new factors and new relationships. When we are confident in our
models ability to explain physical phenomena and describe relationships, we use
them to predict. We can use predictive models to find solutions by optimizing
our objectives. Good models are powerful, and they are the very essense of
science.&lt;/p&gt;
&lt;h1&gt;Software&lt;/h1&gt;
&lt;p&gt;Computers have revolutionalized the derivation and use of mathematical models
to understand, describe, and predict our universe. We use code to interpret
mathematics and science into a language that computers can use to perform
calculations that would have taken us years to do by hand. But just like pencil
and paper work there are ways to organize code best to accomplish your objectives. Good
modeling software is based on a set core values.&lt;/p&gt;
&lt;h1&gt;SPACES&lt;/h1&gt;
&lt;p&gt;SPACES is a mnemonic for the core values of good modeling software.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;imple&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;erfomant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;ccurate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;ollaborative&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;xtensible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;table&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Simplicity&lt;/h2&gt;
&lt;p&gt;Good modeling software is simple. It doesn't do more or less than what it needs
to do. It doesn't create more problems than it solves. It isn't convoluted or
difficult to explain. It may contain complex algorithms, but the art and beauty
of good code is that it makes the complex elegant. Document your code well. Use
autodocumentation so that there isn't double documentation. Keep as much of the
documenation in the source code as possible. Make comments that explain the
intent of your code and read like a human being wrote them. Write comments to
yourself. Use &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt; frequently in your code as reminders of
changes you still need or want. Break up your documentation into sections based
on the target audience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always include a &lt;strong&gt;Quickstart Tutorial&lt;/strong&gt; that is one page and has simple but
realistic examples!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Include a detailed but simple user guide, a separate, more detailed theory
guide, a comprehensive API, and a developer guide that explains things like how
to build the documentation, how the CI is set up, how the server is configured,
how to deploy the software, and what conventions were used. Be detailed.
Consider adding a cookbook of examples, a gallery, tutorials, or HOWTO
sections. Your API should be 100% covered.&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;It just has to be fast enough. Usually there is a trade off between speed and
accuracy, so finding the balance is tricky. But in order to be useful, modeling
software must not be slow. Efficiency where possible should always be a
priority. Maybe not in the first draft, but in revisions inefficiency should be
removed wherever it's found. Don't repeat yourself. However, don't create overly complicated code. Efficient code should still be simple. Strive for elegance.&lt;/p&gt;
&lt;h2&gt;Accuracy&lt;/h2&gt;
&lt;p&gt;It just has to be accurate enough. Understand your uncertainties. Regardless,
modeling software that is inaccurate is useless. Make sure it works the way
it's expected. Validate with publicly available data and publish
your results in a notebook, like &lt;a href="https://jupyter.org"&gt;Jupyter&lt;/a&gt;,
with the analysis code so others can run your calculations too.
Check the bias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot the distribution of the bias&lt;/li&gt;
&lt;li&gt;auto correlate against the output&lt;/li&gt;
&lt;li&gt;look for correlation versus time and location, by month and hour
   of the day, and by vertical and horizontal position&lt;/li&gt;
&lt;li&gt;cross correlate against the inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calculate the mean bias difference (MBD) and root mean square difference (RMSD). All correlations should be random and bias should be uniformly distributed.
Don't validate with your training data. Save a third of the data for validation.&lt;/p&gt;
&lt;p&gt;Include high precision test data and use it in your unit tests.&lt;/p&gt;
&lt;h2&gt;Collaboration&lt;/h2&gt;
&lt;p&gt;Work together. Science is consensus. Others have already solved your problems.
Others can find new problems. Use what is out there already. Don't reinvent the
wheel. Ask for help. Get opinions. Listen. Consider alternatives. Collaborate.&lt;/p&gt;
&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Things change. Our understanding of the physical world changes. New
technologies evolve. Build in the capacity for change in your modeling
software. Anticipate that your code will need to adapt. Make it easy to
maintain and update. Make it extensible to customization. Modularize. Break
down your model into units that can be reused, so that intermediate values
can be interrogated easily, and so contributions can be made at different entry
points. Consider making your application a stack with a common object that is
passed from unit to unit, and can be serialized and deserialized when needed.
This will make it easier to save and load state, and to scale and parallelize.
It will also make it easier to test.&lt;/p&gt;
&lt;h2&gt;Stability&lt;/h2&gt;
&lt;p&gt;Good modeling software isn't fragile. It should be bomb proof. Test it. Use a
unitest framework as well as some end-to-end tests. Strive for 100% coverage.
Set up a CI server to test on every push to the master branch and on pulls.
Don't use polynomial fits over 3rd order unless they are physical. Set limits
on arguments, and handle exceptions gracefully. Make sure that equations don't
blow up unexpectedly and return &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Inf&lt;/code&gt; everywhere. Make sure that units
are explained in the documentation or user interface. Scale big numbers and
watch out for overflows. Watch for interger division. It's okay to follow the
practice of "easier to ask for forgiveness than permission" but errors have to
be handled eventually, and users deserve meaningful feedback. Just make sure it
always works as expected.&lt;/p&gt;
&lt;h2&gt;Spaces&lt;/h2&gt;
&lt;p&gt;Put spaces in your code. Don't be terse. Follow the coding guidelines common
for the codebase.&lt;/p&gt;</content><category term="rant"></category><category term="code"></category></entry><entry><title>Iterative Project Planning in Research and Development</title><link href="https://breakingbytes.github.io/iterative-project-planning-in-research-and-development.html" rel="alternate"></link><published>2017-06-16T13:04:39-07:00</published><updated>2017-06-16T13:04:39-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-06-16:/iterative-project-planning-in-research-and-development.html</id><summary type="html">&lt;p&gt;Iterative planning is a a successful strategy for research and development.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Objectives and Scope&lt;/h1&gt;
&lt;p&gt;The purpose of this document is to outline a successful strategy for the optimal
preparation, execution and measurement of plans for open-ended research and
development projects. In particular this document demonstrates the effective use
of short-term iteration cycle planning commonly known as Agile, Scrum or Kanban
project management. It is important to note that the methods described in this
document are not applicable to projects which have well-known execution times
such as engineering, procurement and construction (EPC). Also while short-term
iteration cycle planning may work well for open-ended research questions, they
may be combined with traditional waterfall techniques in time-limited projects.&lt;/p&gt;
&lt;h1&gt;Methods&lt;/h1&gt;
&lt;p&gt;In a nutshell, an iterative project plan has these major features:&lt;/p&gt;
&lt;h2&gt;Mission&lt;/h2&gt;
&lt;p&gt;All projects should have a big giant overriding mission statement. This is what
you look at when you're really lost and trying to re-inspire your team. In other
words, this is what it's all about. For example a school projects mission might
be the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To empower students to become agents of their own learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Goals or Objectives&lt;/h2&gt;
&lt;p&gt;In order to accomplish the mission, you need a few long-term, broad goals or
objectives that point out what direction you think you need to follow. Don't be
too specific here. Continuing the school environment example, some goals might
be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engage students in STEAM&lt;/li&gt;
&lt;li&gt;Reinforce literacy in every interaction&lt;/li&gt;
&lt;li&gt;Create a strong sense of community&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Release Cycle&lt;/h2&gt;
&lt;p&gt;Pick a long-term time frame to work in, during which you hope to make progress
in the same direction as these goals. This is your "release cycle". For example
in a school setting the release cycle might be every three months.&lt;/p&gt;
&lt;h2&gt;Milestones or Epics&lt;/h2&gt;
&lt;p&gt;Narrow down milestones for each of the broad goals that you think can be
accomplished during each release cycle. These milestones are sometimes called
"epics" or "projects"&lt;/p&gt;
&lt;h2&gt;Iteration Cycle&lt;/h2&gt;
&lt;p&gt;Pick a short-term iteration cycle during which you can meet with your team and
measure progress on your "epics". Iteration cycles vary anywhere from weekly to
monthly, but a good compromise is every two weeks. This time-frame is your
"iteration" or "scrum" because you will often meet your group for a quick tally
kind of like a rugby scrum.&lt;/p&gt;
&lt;h2&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Brainstorm the detailed, small, atomic tasks that you think would be required to
complete the epics and put them on cards in a list called your backlog. There
are many online tools like &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; that are designed to
make this easy, but a large cork board works just fine. An atomic task is nearly
the smallest discreet unit of work you can think of that would need to be done
in order to accomplish the milestone. Tasks are easily measured, and it should
also be easier to predict the time necessary to complete them.&lt;/p&gt;
&lt;h2&gt;Effort&lt;/h2&gt;
&lt;p&gt;Assign each card or task an effort score. Keep the scale small; think of it as a
rubric, not a linear scale, but it could loosely be proportional to time. A
common effort scale might be the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Effort&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Approximate time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;chore&lt;/td&gt;
&lt;td&gt;any known length of time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;easy&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;hard&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 week&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;mini-epic&lt;/td&gt;
&lt;td&gt;&amp;gt; 1 week&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Usually a chore is a well-defined task that is done all the time so you know
exactly how long it takes. Just mark chores on your schedule and do them. A
mini-epic probably means you should break it into smaller tasks, but you may try
to do it as a single task anyway. Effort is used to measure progress; the data
is used to normalize and prioritize future iteration cycles. Since any data is
useful as long as it is carefully measured and calibrated, you may adjust your
effort scale to fit your needs after several iterations and releases.&lt;/p&gt;
&lt;h3&gt;Kanban&lt;/h3&gt;
&lt;p&gt;Kanban, Scrum and Agile have many similarities. See this
&lt;a href="https://www.smartsheet.com/agile-vs-scrum-vs-waterfall-vs-kanban"&gt;Smartsheet article for a side-by-side comparison&lt;/a&gt;.
In a nutshell, Agile is a philosophy, while Scrum and Kanban are
implementations of Agile. Scrum introduces the concept of a sprint or interval
while Kanban introduces puts all tasks into lists or swimlanes on a board that
everyone can see and manipulate. IMO forget the names and concentrate of what
works best and is easiest to use. The goal is to be efficient and productive.&lt;/p&gt;
&lt;p&gt;The simplest Kanban board can be divided into 3 swimlanes, which is the default
workflow for a new Trello board:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To do (&lt;em&gt;aka&lt;/em&gt; backlog)&lt;/li&gt;
&lt;li&gt;Doing (&lt;em&gt;aka&lt;/em&gt; current work)&lt;/li&gt;
&lt;li&gt;Done (&lt;em&gt;aka&lt;/em&gt; completed work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can add more swimlanes to capture other items such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wishlist, icebox or parking lot - items for a rainy day&lt;/li&gt;
&lt;li&gt;won't do - items ruled out&lt;/li&gt;
&lt;li&gt;in review - almost done&lt;/li&gt;
&lt;li&gt;on deck - in between backlog and current work&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pomodoro&lt;/h3&gt;
&lt;p&gt;One aspect of an iterative workflow that can create anxiety is the measurement
of progress and the evaluation or prediction of the time to complete a task or
milestone. The
&lt;a href="https://cirillocompany.de/pages/pomodoro-technique"&gt;Pomodoro Technique&lt;/a&gt; is a
time management method from the 1980's that provides a concrete conversion rate
between units of work and units of time. One pomodoro is typically equivalent to
30-minutes. Using the Pomodoro technique is a diagnostic tool that eliminates
the need to normalize burndown rates since converting between pomodoros and time
is not subjective.&lt;/p&gt;
&lt;h4&gt;Trello and Pomello&lt;/h4&gt;
&lt;p&gt;Trello is an online tool that offers a Kanban-esque board to organize tasks and
iterations. The &lt;a href="http://www.pomelloapp.com/"&gt;Pomello app&lt;/a&gt; is a plugin for Trello
that integrates Pomodoro. It logs time on task, measures the number of pomodoros
spent on a task and lets you move completed tasks to their swimlane when done.&lt;/p&gt;
&lt;h2&gt;Current Work (Option 1: Kanban)&lt;/h2&gt;
&lt;p&gt;This is my personal preference because IMO the workflow is much simpler since
there are only 3 swimlanes. I use this with the Pomodoro Technique. At the
beginning of each iteration, pull cards into the current work list and count
the number of pomodoros used on each. When a task is done, move it to the
"completed"  list and pull a new item from the backlog. That's it!&lt;/p&gt;
&lt;h2&gt;Current Iteration (Option 2: Scrum)&lt;/h2&gt;
&lt;p&gt;Note this method won't work with Pomello, it's better to use
&lt;a href="http://scrumfortrello.com/"&gt;Scrum for Trello&lt;/a&gt; and
&lt;a href="https://www.burndownfortrello.com/"&gt;Burndown for Trello&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the beginning of each iteration cycle move some cards from the backlog into a
new list called your current iteration. Iterations may be numbered or identified
by date or work-week as long as they are recorded. You should assign individuals
or small teams to tasks and encourage frequent communication and collaboration
between individuals and teams during the iteration. During the iteration teams
and individuals should measure their progress by deducting points from the
initial effort of each task until they are complete and the remaining effort is
zero.&lt;/p&gt;
&lt;p&gt;During the iteration communicate with your team frequently and make adjustments
as needed. For example, during an iteration you might do any or all of the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take new cards from the back log as needed until the iteration is over.&lt;/li&gt;
&lt;li&gt;Reorder cards on the backlog or current iteration board to reprioritize.&lt;/li&gt;
&lt;li&gt;Choose tasks based on their estimated effort and the remaining time in the iteration.&lt;/li&gt;
&lt;li&gt;Reclassify a tasks as an epic and break it into to subtasks.&lt;/li&gt;
&lt;li&gt;Reassign individuals and teams to tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Burndown (Scrum)&lt;/h3&gt;
&lt;p&gt;At the end of the iteration, tally up the effort points completed, add it to the
previous total and divide by the total number of iterations. Plot this data for
everyone, for individuals, for all iterations cumulatively and for each
iteration. These are your burndown rates. Use them to normalize team members and
to determine how much effort can be accomplished per iteration.&lt;/p&gt;
&lt;h4&gt;Table 1: Example Effort per Iteration&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Effort&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Table 2: Example Cummulative Effort&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Cummulative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;16.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;23.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;30.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Table 3: Example Burndown Calculation&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Average&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10.5&lt;/td&gt;
&lt;td&gt;8.125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8.67&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7.67&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;7.83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;7.75&lt;/td&gt;
&lt;td&gt;9.25&lt;/td&gt;
&lt;td&gt;7.625&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Looking at the burndown rates and cumulative effort you can make several
observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bobby and Briana are either the team’s top performers or are over estimating
  effort. Use this info to normalize the team by either using your own effort
  scale or pairing teammates together to see their joint effort estimates. For
  example if Briana is high performer, her burndown stands, and if Bobby’s
  performance is more equivalent to the team average then adjust it by a factor
  of around 85% to 7.65 instead of 9. Ditto for Sally if she is sandbagging her
  effort estimates, adjust hers by a factor of 1.7x to 7.65.&lt;/li&gt;
&lt;li&gt;Now that your burndown is normalized, the adjusted team average is around
  8 points of Effort per Iteration. Therefore you should only plan to add tasks
  summing up to around 32 effort points each iteration.&lt;/li&gt;
&lt;li&gt;If your iteration is half over, and Juan’s queue is empty, you can only expect
  him to deliver around 4 effort in the remaining time, so choose tasks summing
  up to this or less.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reprioritization&lt;/h2&gt;
&lt;p&gt;After calculating burndown your team can reprioritize tasks and epics, both in
response to data on progress but also due to a shift in the team mission and
associated objectives. Move incomplete tasks from the current iteration either
to epics because they were just too big to do in a single iteration, back to the
backlog because you over allocated effort or to a board called the “Icebox” or
“Parking Lot” to revisit on a rainy day.&lt;/p&gt;
&lt;h2&gt;Release&lt;/h2&gt;
&lt;p&gt;At the end of the release, publish what you have. Report on it. Re-evaluate your
milestones and compare to your broad long term goals and your mission.  Adjust
your milestones as needed. Then celebrate!&lt;/p&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;p&gt;Here are some typical workflows and how you can set them up using Trello.&lt;/p&gt;
&lt;h2&gt;Kanban&lt;/h2&gt;
&lt;p&gt;Just take the default Trello layout and start working. Put ideas that come up
into the backlog. Break them up into tasks as needed. Each week move some items
into the current work list. When an item is finished move it to the completed
list. Use the Pomello app to measure how many pomodoros they take, and use that
info to make predictions about when projects will get done. That's it!&lt;/p&gt;
&lt;h2&gt;Scrum&lt;/h2&gt;
&lt;p&gt;One way to use Trello for Scrum is to set up 4 boards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Epics&lt;/li&gt;
&lt;li&gt;Backlog&lt;/li&gt;
&lt;li&gt;Current Iteration by date&lt;/li&gt;
&lt;li&gt;Icebox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each iteration, I archive the old iteration and create a new iteration board
with the date. I move cards around all the time. I only assign effort to tasks
in the backlog which get dragged to the current iteration. I create links from
tasks to epics and vice-versa. I put lots of comments on the cards as I make
progress.&lt;/p&gt;
&lt;h1&gt;Rationale&lt;/h1&gt;
&lt;p&gt;There are many arguments for using short-term iteration cycle planning. I will
list the major salient points here.&lt;/p&gt;
&lt;h2&gt;Uncertainty is Hyperbolic&lt;/h2&gt;
&lt;p&gt;Research and development projects are inherently unknowns. There may be some
data that indicates around doing small isolated tasks, but predicting a string
of tasks and how they will proceed from one another is not possible because as
predictions move out of the data centroid and extrapolate to larger projects and
longer time-frames the uncertainty explodes hyperbolically. Therefore better
predictions can only be made close to the data centroid centered on small atomic
tasks.&lt;/p&gt;
&lt;h2&gt;Humans are Meta Cognitively Wired&lt;/h2&gt;
&lt;p&gt;Meta cognition is understanding about how we think, and we know a lot about how
we think we work.&lt;/p&gt;
&lt;h3&gt;We get a rush from checking off tasks. (Dopamine)&lt;/h3&gt;
&lt;p&gt;Using iterative project planning with shorter term iterations allows
contributors to feel more sense of accomplishment because they complete more
tasks, they receive recognition for completed work and have a clear sense of
expectations because data is explicit and meaningful. The feeling comes from
dopamine released each time we tick off a task.&lt;/p&gt;
&lt;h3&gt;We dislike wasted effort. (Endorphins)&lt;/h3&gt;
&lt;p&gt;Only tasks are S.M.A.R.T.  Milestones, objectives and mission statements are
only loosely structured allowing teams to concentrate on the task at hand. By
spending less time planning out long-term objectives teams feel a strong sense
of purpose. Nothing is more aggravating than spending a long time planning
something only to have it switched around completely halfway through it. This
frustration leads ultimately to burnout and dysfunction. The corollary to this
is the excitement and morale boost of diving into work quickly and quickly
scoring small victories. Even a few small failures here are seen as positive
data toward the correct course of action because there isn’t a lot riding on
them. Working hard releases endorphins, which soothes anxiety and makes us feel
accomplished. A lack of endorphins however leads to anger and stress.&lt;/p&gt;
&lt;h3&gt;We are more productive when we feel self-directed and that our work has purpose. (Serotonin)&lt;/h3&gt;
&lt;p&gt;Iterative project planning allows teams to be more productive with less oversite
since they participate in creating tasks and their current workload by taking
tasks from the backlog. Also by leverage Agile project management software to
organize tasks in iterations and calculate burndown, companies can allow
management to focus on the “Big Picture” giving the entire organization a
stronger sense of unity and focus. This sense of purpose and self-value comes
from serotonin released as we partake in planning our own work.&lt;/p&gt;
&lt;h3&gt;We like to work in groups. (Oxytocin)&lt;/h3&gt;
&lt;p&gt;Iterative project planning is inherently designed for groups. Working together
on a project build trust intimacy and ultimately synergy which multiply
productivity. Understanding and valuing each other’s strengths and weaknesses
makes us closer even in a professional setting. This releases oxytocin which
makes us feel appreciated and loved.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;IMHO iterative project planning is a no brainer for any research and development
group. It increases productivity while reducing costs by leveraging more
individual contributors and sharing leadership.&lt;/p&gt;
&lt;h1&gt;Links&lt;/h1&gt;
&lt;p&gt;Wikipedia Articles and Perspectives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hanselman.com/blog/OptimizeForTinyVictories.aspx"&gt;Optimize for tiny victories - Scott Hanselman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html"&gt;Agile is dead - Pragma Dave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_management"&gt;Agile Mangement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Agile Software Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Scrum (software development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Kanban_(development)"&gt;Kanban (development)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Online Tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://trello.com/markmikofski/recommend"&gt;Trello planning tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pomelloapp.com/"&gt;Pomello app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scrumfortrello.com/"&gt;scrumfortrello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.burndownfortrello.com/"&gt;burndownfortrello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gantt-chart.com/"&gt;ganttify for Trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pivotaltracker.com/"&gt;Pivotal Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redbooth.com/"&gt;Redbooth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="agile"></category><category term="kanban"></category><category term="scrum"></category><category term="development"></category><category term="research"></category><category term="time-management"></category><category term="project-managment"></category><category term="project-planning"></category></entry><entry><title>Vertically Centered</title><link href="https://breakingbytes.github.io/vertically-centered.html" rel="alternate"></link><published>2017-05-25T23:48:00-07:00</published><updated>2017-05-25T23:48:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-05-25:/vertically-centered.html</id><summary type="html">&lt;p&gt;Use jQuery to vertically center an element in a window.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am porting a site, and the original login box would verticaly center, even as
I change the size of the window. There were several StackOverflow answers that
suggested creating a CSS class, which seemed perfect, but they didn't seem to
work. Then I noticed they had some JavaScript in their file to pad the top of
the login &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. I made some simplifications using jQuery and voila!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Vertically center login form in window&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Args:&lt;/span&gt;
&lt;span class="cm"&gt; *     banner (str): id of any banner or navbar elements at the top of&lt;/span&gt;
&lt;span class="cm"&gt; *         window&lt;/span&gt;
&lt;span class="cm"&gt; *     log_form (str):  id of div containing log form to center&lt;/span&gt;
&lt;span class="cm"&gt; *     minht (int): a minimum height to separate div from banner&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Use this as the callback for jQuery&amp;#39;s resize function.*/&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;set_login_form_container_margin_top&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minht&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;banner_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// height of banner&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;window_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// window height&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;login_form_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// login form&lt;/span&gt;
&lt;span class="c1"&gt;// new height = half difference between window and banner + login form&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;window_height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;login_form_height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;banner_height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new_height = &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;new_height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// set the margin on the top of the login form container&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;margin-top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minht&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;minht&lt;/span&gt; : &lt;span class="kt"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use it on your web page with &lt;a href="https://api.jquery.com/resize/"&gt;jQuery's resize function&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/js/vertically_center.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  $(function(){
    set_login_form_container_margin_top(
        &amp;quot;#my_banner&amp;quot;,
        &amp;quot;#login-form-container&amp;quot;, 0);
  });
  $( window ).resize(function(){
    set_login_form_container_margin_top(
        &amp;quot;#my_banner&amp;quot;,
        &amp;quot;#login-form-container&amp;quot;, 0);
  });
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="HTML"></category><category term="web"></category><category term="jQuery"></category></entry><entry><title>Python-3 Virtual Environments on MS Windows</title><link href="https://breakingbytes.github.io/python-3-virtual-environments-on-ms-windows.html" rel="alternate"></link><published>2017-05-18T11:01:00-07:00</published><updated>2017-05-18T11:01:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-05-18:/python-3-virtual-environments-on-ms-windows.html</id><summary type="html">&lt;p&gt;Python-3 venv module vs virtualenv package&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a follow up from my &lt;a href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html"&gt;first post&lt;/a&gt;
on this new Pelican blog. I should have logged how I set up this, instead of
the glib cliché, "usage is a snap". Here I am posting for the second time, and
I'm wondering, "why didn't I just use the
&lt;a href="https://help.github.com/articles/about-github-pages-and-jekyll/"&gt;built in Jekyll static site generator&lt;/a&gt;?"&lt;/p&gt;
&lt;p&gt;Anyway, for posterity...&lt;/p&gt;
&lt;h1&gt;Publishing to GH Pages&lt;/h1&gt;
&lt;p&gt;To publish my pages I use the &lt;code&gt;Makefile&lt;/code&gt; that Pelican generates when you start
your blog using &lt;code&gt;pelican-quickstart&lt;/code&gt;. I may have editted the &lt;code&gt;Makefile&lt;/code&gt; to
target my GitHub &lt;code&gt;master&lt;/code&gt; branch since I'm using
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#user-pages"&gt;User Pages&lt;/a&gt; or maybe
Pelican asked me during the quickstart questionnaire, I can't remember. The
&lt;code&gt;Makefile&lt;/code&gt; uses a handy tool called
&lt;a href="https://github.com/davisp/ghp-import"&gt;&lt;code&gt;ghp-import&lt;/code&gt;&lt;/a&gt; that copies the contents of
the output directory to the target git branch. Then the &lt;code&gt;Makefile&lt;/code&gt; publishes
the blog by pushing the target branch to GitHub. The &lt;code&gt;ghp-import&lt;/code&gt;
package is described a bit in the
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#publishing-to-github"&gt;Pelican Tips&lt;/a&gt;
on publishing to GitHub pages, but the &lt;code&gt;Makefile&lt;/code&gt; takes care of calling it. So
all I have to do to publish my posts is execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could even stick it into &lt;code&gt;.git/hooks/post-commit&lt;/code&gt; to automate publishing.&lt;/p&gt;
&lt;h1&gt;Python-3 Virtual Environment&lt;/h1&gt;
&lt;p&gt;Okay, I can't remeber exactly the reason, but &lt;code&gt;ghp-import&lt;/code&gt; worked better in
Python-3 than Python-2, and so I created a virtual environment for Python-3.
This brings me finally to the title of this post. How does one create a virtual
environment for Python-3? Well according to the
&lt;a href="https://packaging.python.org/installing/#creating-virtual-environments"&gt;Python Packaging Authority (PyPA)&lt;/a&gt;
since Python-3.3 there is a built in module called
&lt;a href="https://docs.python.org/3.5/library/venv.html"&gt;&lt;code&gt;venv&lt;/code&gt;&lt;/a&gt;. However the venerable
&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt; package also works just
fine for Python-3.&lt;/p&gt;
&lt;p&gt;How do these packages differ? There is one major difference that really affects
me. The built in Python-3 &lt;code&gt;venv&lt;/code&gt; module only activates in MS Windows &lt;code&gt;CMD&lt;/code&gt;
terminal or PowerShell whereas Ian Bicking's indispensible &lt;code&gt;virtualenv&lt;/code&gt; package
works in BaSH as well. This is an issue with Python on MS Windows that I
encounter a lot, it's a PITA and breaks the whole concept of a common unified
experience regardless of user's platform. I should be able to use Python exactly
the same on any system with very minor exceptions. Since I tend to mostly
use BaSH, this means that to use the built in &lt;code&gt;venv&lt;/code&gt; module I have to
switch to a MS Windows &lt;code&gt;CMD&lt;/code&gt; shell. I guess it's not that big of a deal, but
since &lt;code&gt;virtualenv&lt;/code&gt; works fine with Python-3, I guess I'll stick with that.&lt;/p&gt;
&lt;p&gt;Okay, there's also one other important difference. Python-3 installs all of its
shared objects into the virtual environment, which is different from Python-2
which uses links mostly. This means that when you update your version of
Python-3 you need to &lt;em&gt;also&lt;/em&gt; update your virtual environment.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;virtualenv&lt;/code&gt; package you'll have to create a new virtual environment on
top of the old one. But for the built in &lt;code&gt;venv&lt;/code&gt; module you can just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -3 -m venv --upgrade &amp;lt;my-py3-venv&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;&amp;lt;my-py3-venv&amp;gt;&lt;/code&gt; is the name of your Python-3 virtual environment. I think
the source code for both are nearly the same, and I also think that under the
hood the &lt;code&gt;--upgrade&lt;/code&gt; option is really doing exactly the same thing as
&lt;code&gt;virtualenv&lt;/code&gt;, the difference is that if you try to create a virtual environment
on top of an existing one with the Python-3 &lt;code&gt;venv&lt;/code&gt; module is will raise an
exception.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Changed in version 3.4: In earlier versions, if the target directory already
existed, an error was raised, unless the &lt;code&gt;--clear&lt;/code&gt; or &lt;code&gt;--upgrade&lt;/code&gt; option was
provided. Now, if an existing directory is specified, its contents are removed
and the directory is processed as if it had been newly created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In conclusion, I don't see much difference between the two methods. So if you
want to use BaSH on MS Windows, stick with the original, otherwise try the new.&lt;/p&gt;</content><category term="virtualenv"></category><category term="pelican"></category><category term="windows"></category><category term="bash"></category><category term="rant"></category></entry><entry><title>Moving to Pelican at GitHub Pages</title><link href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html" rel="alternate"></link><published>2017-04-03T13:02:00-07:00</published><updated>2017-04-03T13:02:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-04-03:/moving-to-pelican-at-github-pages.html</id><summary type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;! I did a very quick
&lt;a href="https://www.fullstackpython.com/static-site-generator.html"&gt;search for static site generators&lt;/a&gt;
like Pelican, Hyde and a few others, and Pelican quickly emerged as the most
popular. &lt;a href="https://news.ycombinator.com/item?id=4928719"&gt;Also Kenneth Reitz said to use it.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So far Pelican usage is a snap, just follow
&lt;a href="http://docs.getpelican.com/en/stable/index.html"&gt;the quickstart in their documentation&lt;/a&gt;.
So this is my very first, albeit very short, post for my new blog site. Why leave
Google Blogger?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've wanted to for a very long time, b/c I wanted to manage my blog using
  Git.&lt;/li&gt;
&lt;li&gt;My old blog is now being crawled every few hours which just seems weird.&lt;/li&gt;
&lt;li&gt;I prefer my &lt;code&gt;breakingbytes&lt;/code&gt; handle to "Poquito Picante" which is just a
  silly alliteration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info about me please visit &lt;a href="https://mikofski.github.io/"&gt;me here&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>