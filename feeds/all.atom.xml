<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Breaking Bytes</title><link href="https://breakingbytes.github.io/" rel="alternate"></link><link href="https://breakingbytes.github.io/feeds/all.atom.xml" rel="self"></link><id>https://breakingbytes.github.io/</id><updated>2017-05-18T11:01:00-07:00</updated><entry><title>Python-3 Virtual Environments on MS Windows</title><link href="https://breakingbytes.github.io/python-3-virtual-environments-on-ms-windows.html" rel="alternate"></link><published>2017-05-18T11:01:00-07:00</published><updated>2017-05-18T11:01:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-05-18:/python-3-virtual-environments-on-ms-windows.html</id><summary type="html">&lt;p&gt;Python-3 venv module vs virtualenv package&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a follow up from my &lt;a href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html"&gt;first post&lt;/a&gt;
on this new Pelican blog. I should have logged how I set up this, instead of
the glib cliché, "usage is a snap". Here I am posting for the second time, and
I'm wondering, "why didn't I just use the
&lt;a href="https://help.github.com/articles/about-github-pages-and-jekyll/"&gt;built in Jekyll static site generator&lt;/a&gt;?"&lt;/p&gt;
&lt;p&gt;Anyway, for posterity...&lt;/p&gt;
&lt;h1&gt;Publishing to GH Pages&lt;/h1&gt;
&lt;p&gt;To publish my pages I use the &lt;code&gt;Makefile&lt;/code&gt; that Pelican generates when you start
your blog using &lt;code&gt;pelican-quickstart&lt;/code&gt;. I may have editted the &lt;code&gt;Makefile&lt;/code&gt; to
target my GitHub &lt;code&gt;master&lt;/code&gt; branch since I'm using
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#user-pages"&gt;User Pages&lt;/a&gt; or maybe
Pelican asked me during the quickstart questionnaire, I can't remember. The
&lt;code&gt;Makefile&lt;/code&gt; uses a handy tool called
&lt;a href="https://github.com/davisp/ghp-import"&gt;&lt;code&gt;ghp-import&lt;/code&gt;&lt;/a&gt; that copies the contents of
the output directory to the target git branch. Then the &lt;code&gt;Makefile&lt;/code&gt; publishes
the blog by pushing the target branch to GitHub. The &lt;code&gt;ghp-import&lt;/code&gt;
package is described a bit in the
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#publishing-to-github"&gt;Pelican Tips&lt;/a&gt;
on publishing to GitHub pages, but the &lt;code&gt;Makefile&lt;/code&gt; takes care of calling it. So
all I have to do to publish my posts is execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could even stick it into &lt;code&gt;.git/hooks/post-commit&lt;/code&gt; to automate publishing.&lt;/p&gt;
&lt;h1&gt;Python-3 Virtual Environment&lt;/h1&gt;
&lt;p&gt;Okay, I can't remeber exactly the reason, but &lt;code&gt;ghp-import&lt;/code&gt; worked better in
Python-3 than Python-2, and so I created a virtual environment for Python-3.
This brings me finally to the title of this post. How does one create a virtual
environment for Python-3? Well according to the
&lt;a href="https://packaging.python.org/installing/#creating-virtual-environments"&gt;Python Packaging Authority (PyPA)&lt;/a&gt;
since Python-3.3 there is a built in module called
&lt;a href="https://docs.python.org/3.5/library/venv.html"&gt;&lt;code&gt;venv&lt;/code&gt;&lt;/a&gt;. However the venerable
&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt; package also works just
fine for Python-3.&lt;/p&gt;
&lt;p&gt;How do these packages differ? There is one major difference that really affects
me. The built in Python-3 &lt;code&gt;venv&lt;/code&gt; module only activates in MS Windows &lt;code&gt;CMD&lt;/code&gt;
terminal or PowerShell whereas Ian Bicking's indispensible &lt;code&gt;virtualenv&lt;/code&gt; package
works in BaSH as well. This is an issue with Python on MS Windows that I
encounter a lot, it's a PITA and breaks the whole concept of a common unified
experience regardless of user's platform. I should be able to use Python exactly
the same on any system with very minor exceptions. Since I tend to mostly
use BaSH, this means that to use the built in &lt;code&gt;venv&lt;/code&gt; module I have to
switch to a MS Windows &lt;code&gt;CMD&lt;/code&gt; shell. I guess it's not that big of a deal, but
since &lt;code&gt;virtualenv&lt;/code&gt; works fine with Python-3, I guess I'll stick with that.&lt;/p&gt;
&lt;p&gt;Okay, there's also one other important difference. Python-3 installs all of its
shared objects into the virtual environment, which is different from Python-2
which uses links mostly. This means that when you update your version of
Python-3 you need to &lt;em&gt;also&lt;/em&gt; update your virtual environment.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;virtualenv&lt;/code&gt; package you'll have to create a new virtual environment on
top of the old one. But for the built in &lt;code&gt;venv&lt;/code&gt; module you can just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -3 -m venv --upgrade &amp;lt;my-py3-venv&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;&amp;lt;my-py3-venv&amp;gt;&lt;/code&gt; is the name of your Python-3 virtual environment. I think
the source code for both are nearly the same, and I also think that under the
hood the &lt;code&gt;--upgrade&lt;/code&gt; option is really doing exactly the same thing as
&lt;code&gt;virtualenv&lt;/code&gt;, the difference is that if you try to create a virtual environment
on top of an existing one with the Python-3 &lt;code&gt;venv&lt;/code&gt; module is will raise an
exception.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Changed in version 3.4: In earlier versions, if the target directory already
existed, an error was raised, unless the &lt;code&gt;--clear&lt;/code&gt; or &lt;code&gt;--upgrade&lt;/code&gt; option was
provided. Now, if an existing directory is specified, its contents are removed
and the directory is processed as if it had been newly created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In conclusion, I don't see much difference between the two methods. So if you
want to use BaSH on MS Windows, stick with the original, otherwise try the new.&lt;/p&gt;</content><category term="virtualenv"></category><category term="pelican"></category><category term="windows"></category><category term="bash"></category><category term="rant"></category></entry><entry><title>Moving to Pelican at GitHub Pages</title><link href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html" rel="alternate"></link><published>2017-04-03T13:02:00-07:00</published><updated>2017-04-03T13:02:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-04-03:/moving-to-pelican-at-github-pages.html</id><summary type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;! I did a very quick
&lt;a href="https://www.fullstackpython.com/static-site-generator.html"&gt;search for static site generators&lt;/a&gt;
like Pelican, Hyde and a few others, and Pelican quickly emerged as the most
popular. &lt;a href="https://news.ycombinator.com/item?id=4928719"&gt;Also Kenneth Reitz said to use it.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So far Pelican usage is a snap, just follow
&lt;a href="http://docs.getpelican.com/en/stable/index.html"&gt;the quickstart in their documentation&lt;/a&gt;.
So this is my very first, albeit very short, post for my new blog site. Why leave
Google Blogger?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've wanted to for a very long time, b/c I wanted to manage my blog using
  Git.&lt;/li&gt;
&lt;li&gt;My old blog is now being crawled every few hours which just seems weird.&lt;/li&gt;
&lt;li&gt;I prefer my &lt;code&gt;breakingbytes&lt;/code&gt; handle to "Poquito Picante" which is just a
  silly alliteration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info about me please visit &lt;a href="https://mikofski.github.io/"&gt;me here&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>