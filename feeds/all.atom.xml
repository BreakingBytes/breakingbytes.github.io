<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Breaking Bytes</title><link href="https://breakingbytes.github.io/" rel="alternate"></link><link href="https://breakingbytes.github.io/feeds/all.atom.xml" rel="self"></link><id>https://breakingbytes.github.io/</id><updated>2021-05-01T00:00:00-07:00</updated><entry><title>Climbing Life Lessons: Offwidths</title><link href="https://breakingbytes.github.io/climbing-life-lessons-offwidths.html" rel="alternate"></link><published>2021-05-01T00:00:00-07:00</published><updated>2021-05-01T00:00:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2021-05-01:/climbing-life-lessons-offwidths.html</id><summary type="html">&lt;p&gt;An offwidth is a difficult climb, too big for hand jams, but too small to chimney.&lt;/p&gt;</summary><content type="html">&lt;h1 id="life-lessons-from-an-offwidth"&gt;Life Lessons from an Offwidth&lt;/h1&gt;
&lt;p&gt;&lt;img alt="East Buttress" src="images/eastbutress-of-elcap-route.JPG"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.supertopo.com/rock-climbing/Yosemite-Valley-El-Capitan-East-Buttress"&gt;East Buttress of El Capitan&lt;/a&gt; is one of the best but hardest climbs I've ever been on. It's long &amp;amp; sustained, with huge exposure &amp;amp; beautiful, sweeping views of the valley &amp;amp; Middle Cathedral. In typical Yosemite fashion, it challenges you right from the get go with a steep chimney overlooking a 1,000-foot drop. Then on the 9th pitch, after you been climbing for a few hours, over 2,000 feet above the valley floor, there's a classic Yosemite offwidth. Like glacial polish, Yosemite offwidths are a ritual you can't avoid. You just have to stash your ego, open your heart, and humbly listen to what the great mother is trying to teach you.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pitch 9 offwidth" src="images/9-ow-pitcheastbut2.JPG"&gt;&lt;/p&gt;
&lt;p&gt;That's me, 20 years ago, on that incredible, unforgettable flaring 9th pitch. An offwidth is a difficult climb. It's too big for hand jams, but too small to chimney. Everybody has advice for offwidths: armbars, heel-toe jams, chicken wings, kneebars, shoulder jams, handstacks, liebacks, you name it. About the only advice worth following comes from climbing and squirrel suit legend &lt;a href="https://stephdavis.co/blog/how-to-climb-offwidths-101/"&gt;Steph Davis&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think the biggest thing with offwidths is to remain calm and be patient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;She makes it sound so easy! However, there's another dimension that exponentially increases the challenge. Placing protection on offwidths is no joke. First, it's no fun lugging a giant cam 1,000 vertical feet just to use it once. Oh, did I mention the 9th pitch is one of the longest? So make that two huge 5-inch cams. So far we have challenging, sustained, strenuous technique combined with sketchy, runout pro, fatigue, and huge exposure. Oh, but did I mention the breathtaking, awe-inspiring views? Look right across the yawning expanse of the valley is the mighty Middle Cathedral rock! And behold Half Dome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Middle Cathedral" src="images/mighty-cathedral-in-the-morn.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Half Dome" src="images/halfdomefromelcap.JPG"&gt;&lt;/p&gt;
&lt;p&gt;Feeling good now? So what exactly is the great mother trying to teach us? Trust. Relax. Move intentionally, methodically, and don't hesitate. Above all, resist the urge to bump or reposition your pro. What's this? Remember we only have one gigantic cam with us on this slog, we're scared and tired, so it might seem logical to reach down and pull that cam up, or maybe you spy the perfect placement you couldn't find when you shoved it in desperately thinking you might slip out any second. Sometimes if you're lucky on a nice evenly spaced marathon, maybe you can bump the cam over your head a few times as you move up. However, these dream parallel chasms only exist in Canyonland sandstone. Out on the granite cliffs of the valley, unfortunately you're more likely to accidentally lose your only last good pro as the cam tips out into a sudden widening or jam in the back never to be retrieved again. Your second will curse you, other parties will praise you as they clip this fixed pro, and later a seasoned YOSAR regular will pull it out as the rock changes, reading it like an ancient magic rune. A &lt;a href="https://www.climbing.com/skills/learn-this-offwidth-protection-primer/"&gt;Climbing magazine&lt;/a&gt; primer summarizes the cons well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the cam tips out or falls down the rope, you could end up way above your last piece. Worse, it could knock out that last piece—and possibly your belayer. Be careful not to push your cam into a spot that’s too tight, too tipped out to hold a fall, or out of your reach.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course use long slings so you don't inadvertently walk your cam out of its spot, and suffer the same fate as if you bumped it yourself. Argh! There are so many things to consider, and you're in a really tight spot (pun intended). So don't try any 11th hour dramatics. Leave the gear where it is, keep moving, find another placement deeper in the crack, maybe back it up. Climbers have an old saying that is part cheek and part truth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When in doubt run it out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It means keep climbing. Unless you're going to downclimb or retreat, it's better to keep making forward progress, than to burn out in a precarious situation. Chances are you will power through the moves, and more often than not the rock offers you a neat solution that saves your ass at the last minute. But you won't have the juice to make those moves, or the brains to read what the rock is telling you, if you spin out trying to fix a piece of pro that's already your best placement.&lt;/p&gt;
&lt;p&gt;So what's the lesson? How does this apply to me, in my office, clicking a keyboard? Have you ever had a project or a product that's about to ship? And your boss calls you at 11pm, and says, "Hey change this thing." Or maybe you're the boss, and you call your team with a desperate hail Mary pitch at the last minute. &lt;strong&gt;Don't. Just. Don't!&lt;/strong&gt; Calm down. Relax. Trust your team. Stick to the plan. The most important part is sending the project. Whatever your idea is, it's just not worth it. Or maybe it is? But you better be damned sure, because you had a product ready to ship. Are you certain you really want to fuck it up on a Friday night? Why not sleep on it? Maybe in the morning, when you start getting feedback, some bad, some good, on the product that you &lt;em&gt;actually&lt;/em&gt; delivered, you'll be glad that you didn't almost bomb everything.&lt;/p&gt;
&lt;p&gt;This is the lesson. After the 9th pitch, the climbing on the East Buttress was still hard, not technically, but we had reached the end of our rope (no pun this time) and we were tired. There was some mundane 5-easy, exposed traversing with awful rope drag, but we made it to the top. And what a top out it was. Half Dome ablaze in the most glorious sunset of my life.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sunset over half dome" src="images/redhalfdome.JPG"&gt;&lt;/p&gt;
&lt;p&gt;The descent is actually the most dangerous part of the climb. Something like 70% of climbing accidents actually happen when parties rap off the ends of their ropes, because they're too tired to pay attention to tiny but crucial details. We descended the famed East Ledges which true El Cap warriors rap from when they finish big wall test pieces like the Nose. There were fixed ropes that looked good enough, and we stuck the finish, with an elated sense of the sublime. The great mother had graced us with her wisdom, and we had tried our best to suss it out.&lt;/p&gt;
&lt;p&gt;So maybe that's the lesson? To keep it all in perspective? We had planned this trip, read the guides, studied the topo maps, racked our gear with intent, rose early and given it our best. We were lucky that we didn't have to improvise. We were given a cake walk, and we ate it up.&lt;/p&gt;
&lt;p&gt;Thanks for listening. Here's me right before the crux 10b move after the chimney. Not a care in the world.&lt;/p&gt;
&lt;p&gt;&lt;img alt="at the 10b crux after the chimney" src="images/marcoatchimneypitch.JPG"&gt;&lt;/p&gt;</content><category term="Productivity"></category><category term="agile"></category><category term="project-management"></category><category term="project-planning"></category><category term="research"></category><category term="rant"></category><category term="time-management"></category></entry><entry><title>Future of Science</title><link href="https://breakingbytes.github.io/future-of-science.html" rel="alternate"></link><published>2020-03-08T00:00:00-08:00</published><updated>2020-03-08T00:00:00-08:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2020-03-08:/future-of-science.html</id><summary type="html">&lt;p&gt;The future of science is OSS, and the language is code.&lt;/p&gt;</summary><content type="html">&lt;h1 id="the-future-of-science-is-oss-and-the-language-is-code"&gt;The future of science is OSS, and the language is code.&lt;/h1&gt;
&lt;p&gt;In the future money is obsolete, currency is your reputation, and you earn it
but contributing to open source data, science, and software. What is open
source? Software seems to dominate open source, but open science, open data,
and open art are also important. Content is not only digital, but also
material. An open science experiment or open educational lesson plan. It's the
ultimate socialist sharing economy. So how does it thrive?&lt;/p&gt;</content><category term="Modeling"></category><category term="OSS"></category><category term="science"></category><category term="code"></category><category term="research"></category><category term="rant"></category></entry><entry><title>Electric Mismatch in Silicon-Cell PV is Not Intuitive</title><link href="https://breakingbytes.github.io/electric-mismatch-in-silicon-cell-pv-is-not-intuitive.html" rel="alternate"></link><published>2019-10-18T15:23:00-07:00</published><updated>2019-10-18T15:23:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2019-10-18:/electric-mismatch-in-silicon-cell-pv-is-not-intuitive.html</id><summary type="html">&lt;p&gt;Why does shade just across the bottom row of cells cause 90% power loss?&lt;/p&gt;</summary><content type="html">&lt;h1 id="uniform-versus-non-uniform-shade"&gt;Uniform Versus Non-Uniform Shade&lt;/h1&gt;
&lt;p&gt;The counter-intuitive effect of shade on photovoltaic (PV) solar energy panels
surprises most people.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shade across a relatively small portion of the panel can cause a
disproportionately large power loss.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, shade across just the bottom row of cells, only 6 cells out of 60,
merely 10% of the PV panel, will cause 90% power loss! Why does this happen?
Did you think it would cause only 10% power loss? Why isn't power loss &lt;em&gt;linear&lt;/em&gt;
with shade?&lt;/p&gt;
&lt;p&gt;OK, to be fair, if the entire array is uniformly shaded or merely illuminated
with a less intense light, then the decrease in power &lt;em&gt;would&lt;/em&gt; be proportional
to the decrease in light intensity. For example if a giant rain cloud passed
over the sun, or the sun slowly sank behind a mountain, so that the same light
was cast everywhere, but just lower intensity, say 50%, then the power would be
50% lower as well.&lt;/p&gt;
&lt;p&gt;So just to be &lt;em&gt;completely clear&lt;/em&gt;, in this post we are &lt;strong&gt;not&lt;/strong&gt; going to talk
about the effects of changes in light intensity that are totally uniform
everywhere, but instead we're going to focus on what happens when there are
non-uniform differences in light intensity across the PV system. Here's an
example of a PV system with non-uniform shade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="non uniform shade on a roof" src="./images/20150923_170418.jpg"&gt;&lt;/p&gt;
&lt;h1 id="pv-primer"&gt;PV Primer&lt;/h1&gt;
&lt;p&gt;In PV lingo, a panel is called a &lt;strong&gt;module&lt;/strong&gt; which, in most silicon PV modules,
is made up of smaller solar &lt;strong&gt;cells&lt;/strong&gt; connected in series. Modules are most
often connected in series to form &lt;strong&gt;strings&lt;/strong&gt; of modules. Strings are connected
in parallel to an &lt;strong&gt;inverter&lt;/strong&gt; which converts DC from the panels to AC which is
sent to the grid.&lt;/p&gt;
&lt;p&gt;Here's a typical PV system at the National Institute of Standards and
Technology (NIST) in Gaithersburg, MD, which has a single 260-kW inverter
connected to 96 strings, each with 12
&lt;a href="https://pvfree.herokuapp.com/cec_modules/14738/"&gt;Sharp NU-U235F2&lt;/a&gt; 235-W
modules. The first four rows are 5 modules deep, but the last row is only 4
modules deep. The modules are all in landscape and have straight stringing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NIST Google" src="./images/nist-ground-array.png"&gt;
&lt;img alt="NIST ground mount racks" src="./images/ground-mount-racks.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here's a simulation from
&lt;a href="https://www.dnvgl.com/services/solar-pv-plant-design-software-solarfarmer-140689"&gt;SolarFarmer&lt;/a&gt;
showing the shadows cast by the eastern trees.&lt;/p&gt;
&lt;p&gt;&lt;img alt="NIST Google" src="./images/NIST_SolarFarmer_trees.png"&gt;
&lt;img alt="NIST Google" src="./images/NIST_Google.png"&gt;&lt;/p&gt;
&lt;h2 id="pv-cells-and-reverse-bias-breakdown"&gt;PV Cells and Reverse Bias Breakdown&lt;/h2&gt;
&lt;p&gt;The cells in a PV module can be considered roughly as a current source in
parallel with a diode and some resistive elements. Diodes are semiconductors.
In other words, they only conduct current in one direction, called the forward
bias. When a negative voltage, or a reverse bias, is applied to the cell, the
semiconductor won't conduct a current. However, if enough reverse bias is
applied, all semiconductors will eventually breakdown, and carry a current.
This phenomema is called &lt;strong&gt;reverse bias breakdown&lt;/strong&gt;, and the &lt;strong&gt;breakdown
voltage&lt;/strong&gt; varies between cell technology. A typical front contact p-type
silicon solar cell may breakdown at around -20 volts, while a back-contact
n-type silicon solar cell may breakdown at -5 volts. There are many factors,
beyond the scope of this primer, that affect reverse bias breakdown, such as
purity of the substrate as well as type and concentration of dopant. The most
important thing to understand about reverse bias breakdown is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a cell is in reverse breakdown, it can carry nearly any current, but
because the voltage is negative, then the cell will dissipate energy and will
get hot as it exchanges heat with the environment around it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="the-single-diode-model"&gt;The Single Diode Model&lt;/h3&gt;
&lt;p&gt;The electric circuit analog used to describe a solar cell is called the single
diode model. Here's a schematic:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Single Diode Model" src="https://pvpmc.sandia.gov/wp-content/uploads/2012/04/Single-Diode-EC2.png"&gt;&lt;/p&gt;
&lt;p&gt;Image credit:
&lt;a href="https://pvpmc.sandia.gov/modeling-steps/2-dc-module-iv/diode-equivalent-circuit-models/"&gt;Sandia PV Performance Modeling Collaborative&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solar cell current-voltage relation, or IV curve, shown below demonstrates
the forward and reverse bias characteristics of a solar cell. The single diode
model matches this response close enough to be used for predictions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="3-quadrant IV curve" src="https://www.pveducation.org/sites/default/files/PVCDROM/Modules/Images/NONIDEAL.gif"&gt;&lt;/p&gt;
&lt;p&gt;Image credit:
&lt;a href="https://www.pveducation.org/pvcdrom/modules-and-arrays/mismatch-effects"&gt;PV Education, UNSW, ASU, &lt;em&gt;et al.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pv-modules-and-bypass-diodes"&gt;PV Modules and Bypass Diodes&lt;/h2&gt;
&lt;p&gt;PV modules are usually designed with bypass diodes to avoid energy loss and hot
spots due to cells in reverse bias breakdown by allowing current to bypass the
cells in reverse bias breakdown. The figure below shows a 72-cell module with
3 bypass diodes, each in parallel with a 24-cell submodule (&lt;em&gt;aka&lt;/em&gt;: substring).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Circuit diagram of the solar module with 72 cells" src="./images/Circuit-diagram-of-the-solar-module-with-72-cells_W640.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Credit: &lt;em&gt;Analysis of Power Loss for Crystalline Silicon Solar Module during the
Course of Encapsulation&lt;/em&gt; by Hong Yang &lt;em&gt;et al.&lt;/em&gt;, April 2015, International
Journal of Photoenergy 2015:1-5 &lt;a href="https://doi.org/10.1155/2015/251615"&gt;DOI: 10.1155/2015/251615&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the voltage in the submodule exceeds a small trigger voltage in the bypass
diode, due to a cell or cells in reverse bias breakdown, then current will flow
through the bypass diode, bypassing the entire submodule. For example, if one
cell in the submodule is in reverse bias breakdown at -20 volts, and the other
23 cells are all normal at 0.6 volts, then the total voltage of the submodule
is -6.2 volts.&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{align}V_{sub} &amp;amp;= -20[V] + 23\left(0.6[V]\right) \\
&amp;amp;= -20[V] + 13.8[V] = -6.2[V]\end{align}$$&lt;/div&gt;
&lt;p&gt;So if the trigger voltage of the bypass diode is -0.5 volts, then the current
will pass through the bypass diode. If the module current is 6 amps, then the
bypass diode dissipates only 3 watts and avoids losing 36 watts from the bad
submodule. What's more important than saving energy though, is that the bypass
diode is also a safety device, because the single cell in reverse bias
breakdown would have dissipated 120 watts, which could potentially cause a
fire, and most likely would cause permanent damage to the cell and the module
encapsulant or backsheet. &lt;/p&gt;
&lt;h1 id="electric-circuit-theory"&gt;Electric Circuit Theory&lt;/h1&gt;
&lt;p&gt;So why does non-uniform shade cause this non-linear effect? If we consider the
PV system as an electric circuit, then it must obey the following two laws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Ohm%27s_law"&gt;Ohm's Law&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Kirchhoff%27s_circuit_laws"&gt;Kirchhoff's Law&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ohms-law"&gt;Ohms Law&lt;/h2&gt;
&lt;p&gt;According to Ohm's law, because the cells and modules in a PV system are all in
series, then they must all carry the same current, &lt;span class="math"&gt;\(I\)&lt;/span&gt;, the total voltage of
each module, &lt;span class="math"&gt;\(V_{mod}\)&lt;/span&gt;, is the sum of the cell voltages in that module, and the
total string voltage, &lt;span class="math"&gt;\(V_{str}\)&lt;/span&gt;, is the sum of the module voltages in the string.
In the equation below, &lt;span class="math"&gt;\(Z\)&lt;/span&gt; represents the impedance of each cell in a module or
each module in a string.&lt;/p&gt;
&lt;div class="math"&gt;$$V = \sum V = I \sum Z$$&lt;/div&gt;
&lt;p&gt;The actual relation in a cell is really a bit more complicated than &lt;span class="math"&gt;\(V=IZ\)&lt;/span&gt;,
but hopefully this will do to explain electrical mismatch for now. The relation
between the flux of charge and solar cell voltage is described by the
&lt;a href="https://en.wikipedia.org/wiki/Poisson%E2%80%93Boltzmann_equation"&gt;Poisson Energy Transport Equation&lt;/a&gt;
but in practice &lt;a href="#the-single-diode-model"&gt;the single diode model&lt;/a&gt; circuit
discussed above, is a useful analog. For more detail on the single diode model,
see this post on
&lt;a href="./examples-of-implicit-versus-explicit-solutions-for-photovoltaic-solar-energy-systems.html"&gt;examples of implicit vs. explicit solutions for PV systems&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="kirchhoffs-law"&gt;Kirchhoff's Law&lt;/h2&gt;
&lt;p&gt;Kirchhoff's law requires the voltage across all of the parallel strings to be
the same as the voltage across the inverter, and the total current at the
inverter nodes to be the sum of the currents from all parallel strings
connected to it.&lt;/p&gt;
&lt;div class="math"&gt;$$I = \sum I = V\sum{\frac{1}{Z}}$$&lt;/div&gt;
&lt;h1 id="electrical-mismatch"&gt;Electrical Mismatch&lt;/h1&gt;
&lt;p&gt;The combined effect of enforcing Ohm's and Kirchhoff's laws on a PV system that
is partially shaded can cause what's called &lt;em&gt;electrical mismatch&lt;/em&gt;. In other
words, the shaded cells can't &lt;em&gt;match&lt;/em&gt; the current being carried by the rest of
the module, or the string with shaded modules can't carry the same voltage as
the PV system, and therefore the entire system has to find a new operating
condition to satisfy Ohm's and Kirchhoff's laws.&lt;/p&gt;
&lt;h2 id="a-rule-of-thumb"&gt;A Rule of Thumb&lt;/h2&gt;
&lt;p&gt;The counter intuitive behavior of a PV array with partial shade can be
understood by remembering the following rule of thumb:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A submodule will perform as well as its most shaded cell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine a submodule has the bottom cells completely shaded, so they are only
getting diffuse light, say 10% of the total plane of array irradiance that's
incident on the other cells in the module. The rest of the PV array is
operating normally, so the current and voltage of each string might be 7.8 amps
and 360 volts, assuming the NIST site shown in the &lt;a href="#pv-primer"&gt;PV Primer&lt;/a&gt;
above. So, as described in the section on
&lt;a href="#pv-cells-and-reverse-bias-breakdown"&gt;PV Cells and Reverse Bias Breakdown&lt;/a&gt;,
the two shaded cells can only carry this current in reverse bias breakdown,
which would trigger the bypass diode to activate, and cause the string to lose
one-third of a module's voltage. However, the strings all have to have the same
voltage, and the maximum power point of the system is not going to be at lower
voltage, so the bad submodule can't activate it's bypass diode, and the string
will have to operate at a lower current - the same current as the bad cell.&lt;/p&gt;
&lt;h2 id="pvmismatch"&gt;PVMismatch&lt;/h2&gt;
&lt;p&gt;We can analyze this using &lt;a href="https://sunpower.github.io/PVMismatch/"&gt;PVMismatch&lt;/a&gt;
Python package by SunPower.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: A PV system with just 10% of cells shaded in only 1 string, loses
nearly all of the power in that string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="script"&gt;Script&lt;/h3&gt;
&lt;p&gt;The following scrpt uses PVMismatch to model a PV system at STC with 10 strings
of 10 &lt;a href="https://pvfree.herokuapp.com/pvmodules/1517/"&gt;SunPower SPR-315E-WHT&lt;/a&gt;
96-cell modules per string. Then analyzes the same system, but with the bottom
row of cells shaded 80%, &lt;em&gt;ie&lt;/em&gt;: only diffuse irradiance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;analyze and plot a 10x10 system with bottom cells of one row shaded&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# import the pvmismatch library&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pvmismatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# import the matplotlib plotting library&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="c1"&gt;# make a 10x10 system of SPR-E20-315 96-cell panels at stc&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pvsystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PVsystem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# plot the system&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotSys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# shade the bottom cell of all modules in the 1st string by 80%&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setSuns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;cells&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Ee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}})&lt;/span&gt;

&lt;span class="c1"&gt;# plot the btm row shaded system&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotSys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# btm row shaded system max power&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pmp&lt;/span&gt;
&lt;span class="c1"&gt;# 29607.549997102204&lt;/span&gt;

&lt;span class="c1"&gt;# make a new stc system for comparison&lt;/span&gt;
&lt;span class="n"&gt;pvsys_stc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pvsystem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PVsystem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# stc system max power&lt;/span&gt;
&lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pmp&lt;/span&gt;
&lt;span class="c1"&gt;# 32119.317380452303&lt;/span&gt;

&lt;span class="c1"&gt;# calculate loss&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pmp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pmp&lt;/span&gt;
&lt;span class="c1"&gt;# 0.07820114461332704&lt;/span&gt;

&lt;span class="c1"&gt;# btm row shaded string max power&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 720.6607971888608&lt;/span&gt;

&lt;span class="c1"&gt;# stc string max power&lt;/span&gt;
&lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 3212.7324983909575&lt;/span&gt;

&lt;span class="c1"&gt;# calculate loss&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pstring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 0.7756860250426105&lt;/span&gt;

&lt;span class="c1"&gt;# plot stc string&lt;/span&gt;
&lt;span class="n"&gt;pvsys_stc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotStr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gcf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# plot btm row shaded string&lt;/span&gt;
&lt;span class="n"&gt;pvsys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pvstrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotStr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gcf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="PV system at STC" src="./images/pvsys_stc.png"&gt; &lt;/p&gt;
&lt;p&gt;The maximum power at STC is 32,119 [W].&lt;/p&gt;
&lt;p&gt;&lt;img alt="PV system with bottom row shaded" src="./images/pvsys_bot_row.png"&gt;&lt;/p&gt;
&lt;p&gt;The maximum power with bottom row shaded) is 29,607 [W]. The calculated the
relative loss, &lt;code&gt;(pvsys_stc – pvys_btm_row) / pvsys_stc&lt;/code&gt;, is 7.8%.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PV string at STC" src="./images/pvstr_stc.png"&gt;&lt;/p&gt;
&lt;p&gt;The string power at STC is 3213 [W].&lt;/p&gt;
&lt;p&gt;&lt;img alt="PV string with bottom row shaded" src="./images/pvstr_bot_row.png"&gt;&lt;/p&gt;
&lt;p&gt;The string power with the bottom row shaded is 721 [W], and the calculated
relative loss, &lt;code&gt;(pvstr_stc – pvstr_btm_row) / pvstr_stc&lt;/code&gt;, is 78%.&lt;/p&gt;
&lt;p&gt;(Sorry the resolution is a bit poor around the knee, this was a quick
simulation using only 100 points.)&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Solar"></category><category term="solar"></category><category term="modeling"></category><category term="code"></category></entry><entry><title>OAuth 2.0 and OpenID Connect Primer</title><link href="https://breakingbytes.github.io/oauth-20-and-openid-connect-primer.html" rel="alternate"></link><published>2019-10-17T17:30:00-07:00</published><updated>2019-10-17T17:30:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2019-10-17:/oauth-20-and-openid-connect-primer.html</id><summary type="html">&lt;p&gt;Authentication and authorization with OAuth 2.0 and OpenID Connect.&lt;/p&gt;</summary><content type="html">&lt;h1 id="authentication-and-authorization"&gt;Authentication and Authorization&lt;/h1&gt;
&lt;p&gt;Web applications may contain both public and private data. Private data may
be further restricted to only certain authorized users. Therefore the web
application must first authenticate a user, and then determine what private
data they are authorized to access. The OAuth 2.0 specification implements an
alternative workflow which alows users to authorize another web application to
access resources on their behalf. The specification states that
&lt;a href="https://oauth.net/articles/authentication/"&gt;OAuth 2.0 is not an authentication protocol&lt;/a&gt;.
However, &lt;a href="https://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; does use OAuth 2.0 to
implement a standard for authentication. GitHub is an example of the OpenID 
Connect standard, see &lt;a href="https://developer.github.com/v3/guides/basics-of-authentication/"&gt;Basics of Authentication&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="terms"&gt;Terms&lt;/h2&gt;
&lt;p&gt;The following definitions are from from the linked reference by Alex Bilbie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource (API) server&lt;/strong&gt;: The server hosting the protected resources,
capable of accepting and responding to protected resource requests using access
tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authorization server&lt;/strong&gt;: The server issuing access tokens to the client
after successfully authenticating the resource owner and obtaining
authorization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource owner (the User)&lt;/strong&gt;: An entity capable of granting access to a
protected resource. When the resource owner is a person, it is referred to as
an end-user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: An application making protected resource requests on behalf of
the resource owner and with its authorization. The term client does not imply
any particular implementation characteristics (e.g. whether the application
executes on a server, a desktop, or other devices).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="authorizing-users-clients"&gt;Authorizing Users &amp;amp; Clients&lt;/h2&gt;
&lt;p&gt;There are four workflows supported by OAuth 2.0 that allow users to authorize
an application to obtain a &lt;code&gt;Bearer&lt;/code&gt; token to gain access to resources in lieu
of user credentials or client tokens.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#authorization-code"&gt;Authorization Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resource-owner-password-credentials"&gt;Resource Owner Password Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#client-credentials"&gt;Client Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implicit (not covered in this post)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="authorization-code"&gt;Authorization Code&lt;/h3&gt;
&lt;p&gt;This is the most secure workflow and is the preferred workflow for applications
running on remote web servers that can store credentials confidentially. The
process is documented in the &lt;a href="https://oauth.net/2/"&gt;OAuth 2.0 specification&lt;/a&gt;
and in the &lt;a href="#references"&gt;References&lt;/a&gt;. The authorization code workflow
consists of the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask an administrator to create a client application with the desired grant
type. You should be given a &lt;code&gt;client_id&lt;/code&gt; and a &lt;code&gt;client_secret&lt;/code&gt;. These must be
treated as secrets, &lt;em&gt;e.g.&lt;/em&gt; never transmit them over HTTP, only HTTPS, and don't
commit them to repositories. The client type for the authorization code
workflow should always be &lt;strong&gt;Confidential&lt;/strong&gt;. A &lt;em&gt;confidential&lt;/em&gt; client can keep a
secret, while a &lt;em&gt;public&lt;/em&gt; client can't. An example of a confidential client
would be a server, while a public client would be single-page JavaScript
application, because anyone could view the page source. Authorization code
should only be used with confidential clients that can keep secrets. The client
registration must include a list of redirect URI to consume the authorization
code from the authorization service.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then a registered client can send a &lt;code&gt;GET&lt;/code&gt; request to the authorization URL
to redirect users to login with the identity provider and get an authorization
code which can be exchanged by the client for an access token. For this example,
we'll use the following fictitious authorization URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://identity-provider/authorize/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The authorization URL is very picky. It must include a the following query
string parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;client_id&amp;quot;: &amp;lt;client-id&amp;gt;,
&amp;quot;state&amp;quot;: &amp;lt;optional&amp;gt;,
&amp;quot;response_type&amp;quot;: &amp;quot;code&amp;quot;,
&amp;quot;redirect_uri&amp;quot;: &amp;lt;redirect_uri&amp;gt;,
&amp;quot;scope&amp;quot;: &amp;quot;read write email name&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authorization can also include the desired scopes including any
additional claims about the user such as: &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;given_name&lt;/code&gt;,
&lt;code&gt;family_name&lt;/code&gt;, &lt;code&gt;openid&lt;/code&gt;, &lt;em&gt;etc.&lt;/em&gt; that can be retrieved in the ID token from
the &lt;code&gt;/identity-provider/userinfo/&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Optionally, the authorization request should also contain a unique &lt;code&gt;state&lt;/code&gt;
code, a string of any length, used to prevent cross site forgery request.
It's up to the client to save the state sent in the request and validate it
with the state returned in the response from the authorization server.&lt;/li&gt;
&lt;li&gt;Optionally there may be an &lt;code&gt;approval_prompt&lt;/code&gt; parameter that can be provided
and set to either &lt;code&gt;force&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. If not set, and there is a "skip
authorization" checkbox in the app registration form which is disabled, then
the default may be &lt;code&gt;force&lt;/code&gt; which may ask users to authenticate everytime. To
only ask users to authenticate the first time, try &lt;code&gt;auto&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The identity provider will ask the user for their credentials if not
already cached in the user's browser.&lt;/li&gt;
&lt;li&gt;Depending on the &lt;code&gt;approval_prompt&lt;/code&gt; parameter or the "skip authorization"
checkbox, the user may be prompted to authorize the token, with a list of the
claims and scopes that the token is requesting.&lt;/li&gt;
&lt;li&gt;The authorization service returns a code and the state submitted by the
client. The code can then be exchanged for an access token.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The redirect URI on the client side has 10 minutes, and one attempt to
exchange the authorization code for an access token. This request is sent as a
&lt;code&gt;POST&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://identity-provider/token/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The token URL is very picky. It must include the client's id and secret
either as a basic authentication header or as payload data. Additionally the
following data must also be in the payload of the &lt;code&gt;POST&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;grant_type&amp;quot;: &amp;quot;authorization_code&amp;quot;,
&amp;quot;code&amp;quot;: &amp;lt;code&amp;gt;,
&amp;quot;redirect_uri&amp;quot;: &amp;lt;redirect_uri&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The response is a JSON string with the &lt;code&gt;access_token&lt;/code&gt;, &lt;code&gt;expires_in&lt;/code&gt;,
&lt;code&gt;token_type&lt;/code&gt; (always &lt;code&gt;Bearer&lt;/code&gt;), &lt;code&gt;scopes&lt;/code&gt; and a &lt;code&gt;refresh_token&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="resource-owner-password-credentials"&gt;Resource Owner Password Credentials&lt;/h3&gt;
&lt;p&gt;This can be used by trusted clients by passing users credentials directly to
the authorization server, in return for a token. See the
&lt;a href="#references"&gt;References&lt;/a&gt; for more info and examples.&lt;/p&gt;
&lt;h3 id="client-credentials"&gt;Client Credentials&lt;/h3&gt;
&lt;p&gt;This can be used by trusted clients to use the API directly on their own behalf
with any user. See the &lt;a href="#references"&gt;References&lt;/a&gt; for more info and examples.&lt;/p&gt;
&lt;h3 id="refresh-token"&gt;Refresh Token&lt;/h3&gt;
&lt;p&gt;This can be used by any client to extend a token before it expires by
exchanging a &lt;em&gt;refresh token&lt;/em&gt; for a new token without requiring the user to
reenter their credentials. See the &lt;a href="#references"&gt;References&lt;/a&gt; for more info and
examples.&lt;/p&gt;
&lt;h2 id="getting-user-info"&gt;Getting User Info&lt;/h2&gt;
&lt;p&gt;This part of the OpenID Connect specification allows a client to use the access
token to obtain the token owners identity and other claims such as &lt;code&gt;email&lt;/code&gt;,
&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;given_name&lt;/code&gt; and &lt;code&gt;family_name&lt;/code&gt;. These claims must be submitted as
scopes when the authorization code is requested. Then the client can send a
&lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://identity-provider/userinfo/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;GET&lt;/code&gt; must have an authorization header containing the bearer token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Authorization: &amp;quot;Bearer &amp;lt;token&amp;gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The content of the response is JSON web token (JWT), a base-64 encoded string
signed by hashing the JWT using the client secret as the key. See
&lt;a href="https://jwt.io/"&gt;jwt.io&lt;/a&gt; for more information and available bindings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The response status code should be &lt;code&gt;200 OK&lt;/code&gt; and the content type should be
&lt;code&gt;application/jwt&lt;/code&gt;. The status code will be &lt;code&gt;405 METHOD NOT ALLOWED&lt;/code&gt; if the
request does not use &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;403 FORBIDDEN&lt;/code&gt; if the bearer token is missing
or invalid.&lt;/li&gt;
&lt;li&gt;The JWT contains the user name as the subject claim, &lt;code&gt;sub&lt;/code&gt;, as well as any
additional claims requested as scopes.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;groups&lt;/code&gt; scope to get access to groups a user belongs to on the
identity provider such as the &lt;em&gt;administrator&lt;/em&gt; group.&lt;/li&gt;
&lt;li&gt;It is up to the client to validate that the JWT is signed correctly. The hash
algorithm is in the JWT as &lt;code&gt;alg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The JWT also has an issuer claim, &lt;code&gt;iss&lt;/code&gt;, that should be set to the name of the
identity provider.&lt;/li&gt;
&lt;li&gt;The JWT audience claim, &lt;code&gt;aud&lt;/code&gt;, is the the client id.&lt;/li&gt;
&lt;li&gt;It's up to the client to check the time frame of the JWT using issued at
&lt;code&gt;iat&lt;/code&gt;, expires in &lt;code&gt;exp&lt;/code&gt;, and not before &lt;code&gt;nbf&lt;/code&gt; claims.&lt;/li&gt;
&lt;li&gt;The client can also confirm that the correct token was used by examining the
access token hash claim, &lt;code&gt;at_hash&lt;/code&gt;. Please see the the
&lt;a href="http://openid.net/specs/openid-connect-core-1_0.html"&gt;OpenID Connect Core&lt;/a&gt;
specification for more info.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="permissions"&gt;Permissions&lt;/h2&gt;
&lt;p&gt;Access to resources can be limited in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;permissions (not covered in this post)&lt;/li&gt;
&lt;li&gt;token scopes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="token-scopes"&gt;Token Scopes&lt;/h3&gt;
&lt;p&gt;If a user or an application is authenticated using an OAuth 2.0 token, then
that token must have the scopes required for the desired action, &lt;em&gt;regardless&lt;/em&gt;
of the owner's permissions or group membership! For example if an application
has been authorized by a member of the &lt;em&gt;administrator&lt;/em&gt; group, then that token
can only be used to edit data if it has the &lt;code&gt;write&lt;/code&gt; scope.&lt;/p&gt;
&lt;h3 id="scopes-and-claims"&gt;Scopes and Claims&lt;/h3&gt;
&lt;p&gt;Scopes can also used as claims to identify a token owner. The following scopes
and claims may be available.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;Read scope&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;Write scope&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groups&lt;/td&gt;
&lt;td&gt;Access to your groups&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;JWT claim for user full name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;JWT claim for user email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;given_name&lt;/td&gt;
&lt;td&gt;JWT claim for first name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;family_name&lt;/td&gt;
&lt;td&gt;JWT claim for last name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;groups&lt;/code&gt; scope can also be used as a claim to get the groups that the token
owner belongs to from the identity provider.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexbilbie.com/guide-to-oauth-2-grants/"&gt;A Guide To Oauth 2.0 Grants by Alex Bilbie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;An Introduction to OAuth 2 by Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;OAuth 2 Simplified by Aaron Parecki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Authentication and Authorization"></category><category term="code"></category><category term="web"></category><category term="auth"></category><category term="oauth"></category><category term="openid"></category></entry><entry><title>Python Concurrency Primer</title><link href="https://breakingbytes.github.io/python-concurrency-primer.html" rel="alternate"></link><published>2019-10-07T10:33:00-07:00</published><updated>2019-10-07T10:33:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2019-10-07:/python-concurrency-primer.html</id><summary type="html">&lt;p&gt;Asynchronous Python workflows for IO and CPU processes on a single machine versus a cluster.&lt;/p&gt;</summary><content type="html">&lt;h1 id="python-threading-versus-multiprocessing"&gt;Python Threading versus Multiprocessing&lt;/h1&gt;
&lt;p&gt;Threading works really well with IO, but not CPU bound processes, hence why there's an &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio lib&lt;/a&gt; for IO and a &lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;MP lib&lt;/a&gt;. Before Py3, you could only manually create threads using the &lt;a href="https://docs.python.org/3/library/threading.html"&gt;threading lib&lt;/a&gt; and some people who don't like asyncio still prefer to use the manual threading lib, an external lib like &lt;a href="https://trio.readthedocs.io/en/stable/"&gt;trio&lt;/a&gt;, or older packages like &lt;a href="http://www.gevent.org/"&gt;gevents&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;For an example of using threading for an IO bound process see the &lt;a href="https://github.com/pvlib/pvlib-python/blob/master/pvlib/iotools/ecmwf_macc.py#L168"&gt;&lt;code&gt;pvlib.iotools.get_ecmwf_macc()&lt;/code&gt; method&lt;/a&gt; which returns the thread that calls the ECMWF api client because it is soooooo slow!&lt;/p&gt;
&lt;h1 id="concurrency-in-the-cloud"&gt;Concurrency in the Cloud&lt;/h1&gt;
&lt;p&gt;Curve ball (⚾) - threading and MP work great for a single computer, but when you are on a cluster, such as web applications, then you have more options!  &lt;/p&gt;
&lt;p&gt;In a web app, you usually have a load balancer in front of several workers who answer get requests.&lt;/p&gt;
&lt;p&gt;Therefore you can deligate the work for both IO and CPU bound processes differently than by using either threading, MP, asyncio, trio, gevent, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; is probably the most popular task queue for distributed resources especially for web applications.&lt;/p&gt;
&lt;p&gt;I would guess there are task managers other than Celery, but would have to Google around to find a curated list - and many examples recommend Celery, eg: &lt;a href="https://devcenter.heroku.com/articles/celery-heroku"&gt;Heroku&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="inter-process-communication"&gt;Inter-Process Communication&lt;/h1&gt;
&lt;p&gt;Note a task queue, threading, and MP all require a way for threads and processes to communicate with each other. Threads on a single machine can more easily share memory which makes them more efficient than MP. For Python threads, I typically use the standard Python &lt;a href="https://docs.python.org/3/library/queue.html"&gt;Queue lib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Multiprocessing requires some form of &lt;a href="https://en.wikipedia.org/wiki/Inter-process_communication"&gt;inter-process communication or IPC&lt;/a&gt;, which attempts to serialize and deserialize objects between processes. Python provides &lt;a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#pipes-and-queues"&gt;MP Queues and Pipes&lt;/a&gt; to &lt;a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#exchanging-objects-between-processes"&gt;exchange objects between processes&lt;/a&gt;. I prefer the MP Queue, because it nearly mimics the API of the standard Python Queue lib, but because it is IPC, I have to be careful to only pass in objects that can be easily serialized and deserialized like numbers, strings, sequences, and dictionaries.&lt;/p&gt;
&lt;p&gt;For distributed computing, the recommendation is to use a message queue like &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; or a shared memory server like &lt;a href="https://memcached.org/"&gt;memcached&lt;/a&gt; or &lt;a href="https://redis.io/"&gt;reddis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I don't have the expertise to say when to use an MQ verses memcache, but there are lots of articles on the internet discussing the pros/cons of each. I've used memcache and it works, but I believe for Celery they preffer MQ.&lt;/p&gt;
&lt;h2 id="queues"&gt;Queues&lt;/h2&gt;
&lt;p&gt;For both threads and processes, IMHO it's a good idea to keep the communication simple. I recommend only pushing the primitive types that will be needed by the target function handled by the thread and then reconstructing more complicated objects in the main branch of execution as needed. I believe this will keep the communication overhead low as well as make it easier to serialize and deserialize target arguments and avoid race conditions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Python also uses the GIL to avoid race conditions between threads. See below.&lt;/p&gt;
&lt;h3 id="thread-safety-and-shared-memory"&gt;Thread Safety and Shared Memory&lt;/h3&gt;
&lt;p&gt;This is at the edge of my experience, but Python does provide tools to lock and synchronize communication between &lt;a href="https://docs.python.org/3/library/threading.html#lock-objects"&gt;threads&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes"&gt;processes&lt;/a&gt; as well as a &lt;a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#sharing-state-between-processes"&gt;shared memory map for multiprocessing&lt;/a&gt;. Explore on your own.&lt;/p&gt;
&lt;h1 id="the-difference-between-io-and-cpu-bound-process"&gt;The Difference Between IO and CPU Bound Process&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An IO bound process is like getting data from a URL, or writing a file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CPU bound process is like a big calculation like matrix inversion, a search routine, or optimization/minimzation problem&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IO bound processes use Threads because threads do not block IO bound processes - IE: you can start an IO process in a thread and execution will continue to the next line unless you tell Python to wait. AsyncIO and Trio probably use threading in the background, IDK for sure.&lt;/p&gt;
&lt;p&gt;CPU bound processes use MP, because they need their own core to do their stuff. But unfortunately there is a lot of overhead with MP, and so the calculation needs to be really expensive to make it worthwhile.&lt;/p&gt;
&lt;p&gt;There's no limit to the number of threads you can create, but the number of MP processes is limited to the number of cores.&lt;/p&gt;
&lt;p&gt;These rules don't apply to distributed computing, and they may not apply in other computing languages either. IE: you can distribute both IO and CPU tasks to a task queue across a cluster. However, there may be task managers that are better suited for different types of tasks. EG: &lt;a href="https://dask.org/"&gt;Dask&lt;/a&gt; is probably better for distributed computing of CPU intense processes. But honestly, IDK, I'm at the edge of my personal research and experience here, and so I would probably recommend a little more exploration ...&lt;/p&gt;
&lt;h1 id="python-global-interpreter-lock"&gt;Python Global Interpreter Lock&lt;/h1&gt;
&lt;p&gt;The reason there's this difference between IO/CPU and threads/processes in Python specifically, and perhaps not other languages, is because Python is single threaded by default due to the &lt;a href="https://wiki.python.org/moin/GlobalInterpreterLock"&gt;Global Interpreter Lock or GIL&lt;/a&gt;. Other languages may or may not have similar design, IDK, however Python C-API does let you explicitly &lt;a href="https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock"&gt;release the GIL&lt;/a&gt; and manage threads manually. This is what packages like &lt;a href="https://scipy-cookbook.readthedocs.io/items/ParallelProgramming.html"&gt;NumPy/SciPy&lt;/a&gt; and &lt;a href="https://cython.readthedocs.io/en/latest/src/userguide/parallelism.html"&gt;CPython&lt;/a&gt; do.&lt;/p&gt;</content><category term="Python"></category><category term="code"></category><category term="web"></category></entry><entry><title>Examples of implicit versus explicit solutions for photovoltaic solar energy systems</title><link href="https://breakingbytes.github.io/examples-of-implicit-versus-explicit-solutions-for-photovoltaic-solar-energy-systems.html" rel="alternate"></link><published>2018-06-22T20:55:00-07:00</published><updated>2018-06-22T20:55:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2018-06-22:/examples-of-implicit-versus-explicit-solutions-for-photovoltaic-solar-energy-systems.html</id><summary type="html">&lt;p&gt;Using a numerical solver to model solar power.&lt;/p&gt;</summary><content type="html">&lt;h1 id="full-scale-pv-modeling"&gt;Full Scale PV Modeling&lt;/h1&gt;
&lt;p&gt;I want to explore different ways to find the operating conditions for max power
of a PV system. I'm going to assume that we're using a single diode model (SDM)
which is an analog curcuit of a solar cell composed from a current source, a
diode, and a resistance in parallel, in series with another resistance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="single diode model" src="https://pvpmc.sandia.gov/wp-content/uploads/2012/04/Single-Diode-EC2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;source: &lt;a href="https://pvpmc.sandia.gov/"&gt;Sandia National Labs: PV Performance Modeling Collaborative&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The cell current in the SDM can't be solved explicitly as a function of cell
voltage without using the Lambert-W function. It can be solved implicitly by
using an iterative solver such as a gradient descent method. And there is an
explicit method that can be used to solve for cell current as a function of an
intermediate parameter, the diode voltage, which can then be used to calculate
the cell current. To get a specific voltage using this explicit parameterized
approach, requires solving for several diode voltages and interpolating.&lt;/p&gt;
&lt;p&gt;A common use of the SDM is to solve for the ideal operating condition of an
entire PV system by assuming all of the cells are identical. Another proposed
usage of the SDM is to model all of the cells in an entire system to account
for their differences either due to variance in manufacturing, ambient
conditions, or degradation. This second problem poses some challenges
computationally for very large systems.&lt;/p&gt;
&lt;p&gt;What is the best method to do full scale PV system modeling? I'm going to skip
the Lambert-W function and focus on implict and explicit methods.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The implicit approach is efficient at finding a single operating condition,
even or especially when most of the cells are different, but it's slow at
tracing the entire IV curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The implicit approach is also efficient at determining the max power point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nesting search methods is less efficient than a single closed solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The explicit method is most efficient at tracing the entire IV curve, even
when every cell is different.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="gist"&gt;Gist&lt;/h1&gt;
&lt;p&gt;The following Gist contains examples for a full scale implicit approach and the
explicit parameterized approach described. The Gist are best viewed on
&lt;a href="http://nbviewer.jupyter.org/gist/mikofski/df318d1f892767ac7c762e732fecaa7f"&gt;nbviewer&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/mikofski/df318d1f892767ac7c762e732fecaa7f.js"&gt;&lt;/script&gt;</content><category term="Solar"></category><category term="code"></category><category term="solar"></category><category term="modeling"></category></entry><entry><title>SPACES: Mnemonic for core values of good modeling software</title><link href="https://breakingbytes.github.io/spaces-mnemonic-for-core-values-of-good-modeling-software.html" rel="alternate"></link><published>2018-05-10T00:14:00-07:00</published><updated>2018-05-10T00:14:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2018-05-10:/spaces-mnemonic-for-core-values-of-good-modeling-software.html</id><summary type="html">&lt;p&gt;What makes good modeling software? Repeat this three times out loud.&lt;/p&gt;</summary><content type="html">&lt;h1 id="modeling"&gt;Modeling&lt;/h1&gt;
&lt;p&gt;Mathematical models of scientific phenomena are essential in engineering. We
use them to design experiments and select instruments based on estimates of the
sensitivities of relationships between factors. We derive models from the
experimental results and use them to develop more predictive models. Sometimes
we can use models to reorganize experimental results to fit into the context of
our understanding of the physical world, and sometimes this leads to the
discovery of new factors and new relationships. When we are confident in our
models ability to explain physical phenomena and describe relationships, we use
them to predict. We can use predictive models to find solutions by optimizing
our objectives. Good models are powerful, and they are the very essense of
science.&lt;/p&gt;
&lt;h1 id="software"&gt;Software&lt;/h1&gt;
&lt;p&gt;Computers have revolutionalized the derivation and use of mathematical models
to understand, describe, and predict our universe. We use code to interpret
mathematics and science into a language that computers can use to perform
calculations that would have taken us years to do by hand. But just like pencil
and paper work there are ways to organize code best to accomplish your objectives. Good
modeling software is based on a set core values.&lt;/p&gt;
&lt;h1 id="spaces"&gt;SPACES&lt;/h1&gt;
&lt;p&gt;SPACES is a mnemonic for the core values of good modeling software.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;imple&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;erfomant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;ccurate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;ollaborative&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;xtensible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;table&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="simplicity"&gt;Simplicity&lt;/h2&gt;
&lt;p&gt;Good modeling software is simple. It doesn't do more or less than what it needs
to do. It doesn't create more problems than it solves. It isn't convoluted or
difficult to explain. It may contain complex algorithms, but the art and beauty
of good code is that it makes the complex elegant. Document your code well. Use
autodocumentation so that there isn't double documentation. Keep as much of the
documenation in the source code as possible. Make comments that explain the
intent of your code and read like a human being wrote them. Write comments to
yourself. Use &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt; frequently in your code as reminders of
changes you still need or want. Break up your documentation into sections based
on the target audience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always include a &lt;strong&gt;Quickstart Tutorial&lt;/strong&gt; that is one page and has simple but
realistic examples!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Include a detailed but simple user guide, a separate, more detailed theory
guide, a comprehensive API, and a developer guide that explains things like how
to build the documentation, how the CI is set up, how the server is configured,
how to deploy the software, and what conventions were used. Be detailed.
Consider adding a cookbook of examples, a gallery, tutorials, or HOWTO
sections. Your API should be 100% covered.&lt;/p&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;p&gt;It just has to be fast enough. Usually there is a trade off between speed and
accuracy, so finding the balance is tricky. But in order to be useful, modeling
software must not be slow. Efficiency where possible should always be a
priority. Maybe not in the first draft, but in revisions inefficiency should be
removed wherever it's found. Don't repeat yourself. However, don't create overly complicated code. Efficient code should still be simple. Strive for elegance.&lt;/p&gt;
&lt;h2 id="accuracy"&gt;Accuracy&lt;/h2&gt;
&lt;p&gt;It just has to be accurate enough. Understand your uncertainties. Regardless,
modeling software that is inaccurate is useless. Make sure it works the way
it's expected. Validate with publicly available data and publish
your results in a notebook, like &lt;a href="https://jupyter.org"&gt;Jupyter&lt;/a&gt;,
with the analysis code so others can run your calculations too.
Check the bias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plot the distribution of the bias&lt;/li&gt;
&lt;li&gt;auto correlate against the output&lt;/li&gt;
&lt;li&gt;look for correlation versus time and location, by month and hour
   of the day, and by vertical and horizontal position&lt;/li&gt;
&lt;li&gt;cross correlate against the inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calculate the mean bias difference (MBD) and root mean square difference (RMSD). All correlations should be random and bias should be uniformly distributed.
Don't validate with your training data. Save a third of the data for validation.&lt;/p&gt;
&lt;p&gt;Include high precision test data and use it in your unit tests.&lt;/p&gt;
&lt;h2 id="collaboration"&gt;Collaboration&lt;/h2&gt;
&lt;p&gt;Work together. Science is consensus. Others have already solved your problems.
Others can find new problems. Use what is out there already. Don't reinvent the
wheel. Ask for help. Get opinions. Listen. Consider alternatives. Collaborate.&lt;/p&gt;
&lt;h2 id="extensibility"&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Things change. Our understanding of the physical world changes. New
technologies evolve. Build in the capacity for change in your modeling
software. Anticipate that your code will need to adapt. Make it easy to
maintain and update. Make it extensible to customization. Modularize. Break
down your model into units that can be reused, so that intermediate values
can be interrogated easily, and so contributions can be made at different entry
points. Consider making your application a stack with a common object that is
passed from unit to unit, and can be serialized and deserialized when needed.
This will make it easier to save and load state, and to scale and parallelize.
It will also make it easier to test.&lt;/p&gt;
&lt;h2 id="stability"&gt;Stability&lt;/h2&gt;
&lt;p&gt;Good modeling software isn't fragile. It should be bomb proof. Test it. Use a
unitest framework as well as some end-to-end tests. Strive for 100% coverage.
Set up a CI server to test on every push to the master branch and on pulls.
Don't use polynomial fits over 3rd order unless they are physical. Set limits
on arguments, and handle exceptions gracefully. Make sure that equations don't
blow up unexpectedly and return &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Inf&lt;/code&gt; everywhere. Make sure that units
are explained in the documentation or user interface. Scale big numbers and
watch out for overflows. Watch for interger division. It's okay to follow the
practice of "easier to ask for forgiveness than permission" but errors have to
be handled eventually, and users deserve meaningful feedback. Just make sure it
always works as expected.&lt;/p&gt;
&lt;h2 id="spaces_1"&gt;Spaces&lt;/h2&gt;
&lt;p&gt;Put spaces in your code. Don't be terse. Follow the coding guidelines common
for the codebase.&lt;/p&gt;</content><category term="Modeling"></category><category term="rant"></category><category term="code"></category><category term="modeling"></category></entry><entry><title>Iterative Project Planning in Research and Development</title><link href="https://breakingbytes.github.io/iterative-project-planning-in-research-and-development.html" rel="alternate"></link><published>2017-06-16T13:04:39-07:00</published><updated>2017-06-16T13:04:39-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-06-16:/iterative-project-planning-in-research-and-development.html</id><summary type="html">&lt;p&gt;Iterative planning is a a successful strategy for research and development.&lt;/p&gt;</summary><content type="html">&lt;h1 id="objectives-and-scope"&gt;Objectives and Scope&lt;/h1&gt;
&lt;p&gt;The purpose of this document is to outline a successful strategy for the optimal
preparation, execution and measurement of plans for open-ended research and
development projects. In particular this document demonstrates the effective use
of short-term iteration cycle planning commonly known as Agile, Scrum or Kanban
project management. It is important to note that the methods described in this
document are not applicable to projects which have well-known execution times
such as engineering, procurement and construction (EPC). Also while short-term
iteration cycle planning may work well for open-ended research questions, they
may be combined with traditional waterfall techniques in time-limited projects.&lt;/p&gt;
&lt;h1 id="methods"&gt;Methods&lt;/h1&gt;
&lt;p&gt;In a nutshell, an iterative project plan has these major features:&lt;/p&gt;
&lt;h2 id="mission"&gt;Mission&lt;/h2&gt;
&lt;p&gt;All projects should have a big giant overriding mission statement. This is what
you look at when you're really lost and trying to re-inspire your team. In other
words, this is what it's all about. For example a school projects mission might
be the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To empower students to become agents of their own learning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="goals-or-objectives"&gt;Goals or Objectives&lt;/h2&gt;
&lt;p&gt;In order to accomplish the mission, you need a few long-term, broad goals or
objectives that point out what direction you think you need to follow. Don't be
too specific here. Continuing the school environment example, some goals might
be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engage students in STEAM&lt;/li&gt;
&lt;li&gt;Reinforce literacy in every interaction&lt;/li&gt;
&lt;li&gt;Create a strong sense of community&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="release-cycle"&gt;Release Cycle&lt;/h2&gt;
&lt;p&gt;Pick a long-term time frame to work in, during which you hope to make progress
in the same direction as these goals. This is your "release cycle". For example
in a school setting the release cycle might be every three months.&lt;/p&gt;
&lt;h2 id="milestones-or-epics"&gt;Milestones or Epics&lt;/h2&gt;
&lt;p&gt;Narrow down milestones for each of the broad goals that you think can be
accomplished during each release cycle. These milestones are sometimes called
"epics" or "projects"&lt;/p&gt;
&lt;h2 id="iteration-cycle"&gt;Iteration Cycle&lt;/h2&gt;
&lt;p&gt;Pick a short-term iteration cycle during which you can meet with your team and
measure progress on your "epics". Iteration cycles vary anywhere from weekly to
monthly, but a good compromise is every two weeks. This time-frame is your
"iteration" or "scrum" because you will often meet your group for a quick tally
kind of like a rugby scrum.&lt;/p&gt;
&lt;h2 id="tasks"&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Brainstorm the detailed, small, atomic tasks that you think would be required to
complete the epics and put them on cards in a list called your backlog. There
are many online tools like &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; that are designed to
make this easy, but a large cork board works just fine. An atomic task is nearly
the smallest discreet unit of work you can think of that would need to be done
in order to accomplish the milestone. Tasks are easily measured, and it should
also be easier to predict the time necessary to complete them.&lt;/p&gt;
&lt;h2 id="effort"&gt;Effort&lt;/h2&gt;
&lt;p&gt;Assign each card or task an effort score. Keep the scale small; think of it as a
rubric, not a linear scale, but it could loosely be proportional to time. A
common effort scale might be the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Effort&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Approximate time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;chore&lt;/td&gt;
&lt;td&gt;any known length of time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;easy&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;hard&lt;/td&gt;
&lt;td&gt;&amp;lt; 1 week&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;mini-epic&lt;/td&gt;
&lt;td&gt;&amp;gt; 1 week&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Usually a chore is a well-defined task that is done all the time so you know
exactly how long it takes. Just mark chores on your schedule and do them. A
mini-epic probably means you should break it into smaller tasks, but you may try
to do it as a single task anyway. Effort is used to measure progress; the data
is used to normalize and prioritize future iteration cycles. Since any data is
useful as long as it is carefully measured and calibrated, you may adjust your
effort scale to fit your needs after several iterations and releases.&lt;/p&gt;
&lt;h3 id="kanban"&gt;Kanban&lt;/h3&gt;
&lt;p&gt;Kanban, Scrum and Agile have many similarities. See this
&lt;a href="https://www.smartsheet.com/agile-vs-scrum-vs-waterfall-vs-kanban"&gt;Smartsheet article for a side-by-side comparison&lt;/a&gt;.
In a nutshell, Agile is a philosophy, while Scrum and Kanban are
implementations of Agile. Scrum introduces the concept of a sprint or interval
while Kanban introduces puts all tasks into lists or swimlanes on a board that
everyone can see and manipulate. IMO forget the names and concentrate of what
works best and is easiest to use. The goal is to be efficient and productive.&lt;/p&gt;
&lt;p&gt;The simplest Kanban board can be divided into 3 swimlanes, which is the default
workflow for a new Trello board:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To do (&lt;em&gt;aka&lt;/em&gt; backlog)&lt;/li&gt;
&lt;li&gt;Doing (&lt;em&gt;aka&lt;/em&gt; current work)&lt;/li&gt;
&lt;li&gt;Done (&lt;em&gt;aka&lt;/em&gt; completed work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can add more swimlanes to capture other items such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wishlist, icebox or parking lot - items for a rainy day&lt;/li&gt;
&lt;li&gt;won't do - items ruled out&lt;/li&gt;
&lt;li&gt;in review - almost done&lt;/li&gt;
&lt;li&gt;on deck - in between backlog and current work&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pomodoro"&gt;Pomodoro&lt;/h3&gt;
&lt;p&gt;One aspect of an iterative workflow that can create anxiety is the measurement
of progress and the evaluation or prediction of the time to complete a task or
milestone. The
&lt;a href="https://cirillocompany.de/pages/pomodoro-technique"&gt;Pomodoro Technique&lt;/a&gt; is a
time management method from the 1980's that provides a concrete conversion rate
between units of work and units of time. One pomodoro is typically equivalent to
30-minutes. Using the Pomodoro technique is a diagnostic tool that eliminates
the need to normalize burndown rates since converting between pomodoros and time
is not subjective.&lt;/p&gt;
&lt;h4 id="trello-and-pomello"&gt;Trello and Pomello&lt;/h4&gt;
&lt;p&gt;Trello is an online tool that offers a Kanban-esque board to organize tasks and
iterations. The &lt;a href="http://www.pomelloapp.com/"&gt;Pomello app&lt;/a&gt; is a plugin for Trello
that integrates Pomodoro. It logs time on task, measures the number of pomodoros
spent on a task and lets you move completed tasks to their swimlane when done.&lt;/p&gt;
&lt;h2 id="current-work-option-1-kanban"&gt;Current Work (Option 1: Kanban)&lt;/h2&gt;
&lt;p&gt;This is my personal preference because IMO the workflow is much simpler since
there are only 3 swimlanes. I use this with the Pomodoro Technique. At the
beginning of each iteration, pull cards into the current work list and count
the number of pomodoros used on each. When a task is done, move it to the
"completed"  list and pull a new item from the backlog. That's it!&lt;/p&gt;
&lt;h2 id="current-iteration-option-2-scrum"&gt;Current Iteration (Option 2: Scrum)&lt;/h2&gt;
&lt;p&gt;Note this method won't work with Pomello, it's better to use
&lt;a href="http://scrumfortrello.com/"&gt;Scrum for Trello&lt;/a&gt; and
&lt;a href="https://www.burndownfortrello.com/"&gt;Burndown for Trello&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the beginning of each iteration cycle move some cards from the backlog into a
new list called your current iteration. Iterations may be numbered or identified
by date or work-week as long as they are recorded. You should assign individuals
or small teams to tasks and encourage frequent communication and collaboration
between individuals and teams during the iteration. During the iteration teams
and individuals should measure their progress by deducting points from the
initial effort of each task until they are complete and the remaining effort is
zero.&lt;/p&gt;
&lt;p&gt;During the iteration communicate with your team frequently and make adjustments
as needed. For example, during an iteration you might do any or all of the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take new cards from the back log as needed until the iteration is over.&lt;/li&gt;
&lt;li&gt;Reorder cards on the backlog or current iteration board to reprioritize.&lt;/li&gt;
&lt;li&gt;Choose tasks based on their estimated effort and the remaining time in the iteration.&lt;/li&gt;
&lt;li&gt;Reclassify a tasks as an epic and break it into to subtasks.&lt;/li&gt;
&lt;li&gt;Reassign individuals and teams to tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="burndown-scrum"&gt;Burndown (Scrum)&lt;/h3&gt;
&lt;p&gt;At the end of the iteration, tally up the effort points completed, add it to the
previous total and divide by the total number of iterations. Plot this data for
everyone, for individuals, for all iterations cumulatively and for each
iteration. These are your burndown rates. Use them to normalize team members and
to determine how much effort can be accomplished per iteration.&lt;/p&gt;
&lt;h4 id="table-1-example-effort-per-iteration"&gt;Table 1: Example Effort per Iteration&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Effort&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="table-2-example-cummulative-effort"&gt;Table 2: Example Cummulative Effort&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Cummulative&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;16.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;23.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;30.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="table-3-example-burndown-calculation"&gt;Table 3: Example Burndown Calculation&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration&lt;/th&gt;
&lt;th&gt;Bobby&lt;/th&gt;
&lt;th&gt;Sally&lt;/th&gt;
&lt;th&gt;Juan&lt;/th&gt;
&lt;th&gt;Briana&lt;/th&gt;
&lt;th&gt;Average&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;10.5&lt;/td&gt;
&lt;td&gt;8.125&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;8.67&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;7.67&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;7.83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;7.75&lt;/td&gt;
&lt;td&gt;9.25&lt;/td&gt;
&lt;td&gt;7.625&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Looking at the burndown rates and cumulative effort you can make several
observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bobby and Briana are either the team’s top performers or are over estimating
  effort. Use this info to normalize the team by either using your own effort
  scale or pairing teammates together to see their joint effort estimates. For
  example if Briana is high performer, her burndown stands, and if Bobby’s
  performance is more equivalent to the team average then adjust it by a factor
  of around 85% to 7.65 instead of 9. Ditto for Sally if she is sandbagging her
  effort estimates, adjust hers by a factor of 1.7x to 7.65.&lt;/li&gt;
&lt;li&gt;Now that your burndown is normalized, the adjusted team average is around
  8 points of Effort per Iteration. Therefore you should only plan to add tasks
  summing up to around 32 effort points each iteration.&lt;/li&gt;
&lt;li&gt;If your iteration is half over, and Juan’s queue is empty, you can only expect
  him to deliver around 4 effort in the remaining time, so choose tasks summing
  up to this or less.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reprioritization"&gt;Reprioritization&lt;/h2&gt;
&lt;p&gt;After calculating burndown your team can reprioritize tasks and epics, both in
response to data on progress but also due to a shift in the team mission and
associated objectives. Move incomplete tasks from the current iteration either
to epics because they were just too big to do in a single iteration, back to the
backlog because you over allocated effort or to a board called the “Icebox” or
“Parking Lot” to revisit on a rainy day.&lt;/p&gt;
&lt;h2 id="release"&gt;Release&lt;/h2&gt;
&lt;p&gt;At the end of the release, publish what you have. Report on it. Re-evaluate your
milestones and compare to your broad long term goals and your mission.  Adjust
your milestones as needed. Then celebrate!&lt;/p&gt;
&lt;h1 id="examples"&gt;Examples&lt;/h1&gt;
&lt;p&gt;Here are some typical workflows and how you can set them up using Trello.&lt;/p&gt;
&lt;h2 id="kanban_1"&gt;Kanban&lt;/h2&gt;
&lt;p&gt;Just take the default Trello layout and start working. Put ideas that come up
into the backlog. Break them up into tasks as needed. Each week move some items
into the current work list. When an item is finished move it to the completed
list. Use the Pomello app to measure how many pomodoros they take, and use that
info to make predictions about when projects will get done. That's it!&lt;/p&gt;
&lt;h2 id="scrum"&gt;Scrum&lt;/h2&gt;
&lt;p&gt;One way to use Trello for Scrum is to set up 4 boards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Epics&lt;/li&gt;
&lt;li&gt;Backlog&lt;/li&gt;
&lt;li&gt;Current Iteration by date&lt;/li&gt;
&lt;li&gt;Icebox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each iteration, I archive the old iteration and create a new iteration board
with the date. I move cards around all the time. I only assign effort to tasks
in the backlog which get dragged to the current iteration. I create links from
tasks to epics and vice-versa. I put lots of comments on the cards as I make
progress.&lt;/p&gt;
&lt;h1 id="rationale"&gt;Rationale&lt;/h1&gt;
&lt;p&gt;There are many arguments for using short-term iteration cycle planning. I will
list the major salient points here.&lt;/p&gt;
&lt;h2 id="uncertainty-is-hyperbolic"&gt;Uncertainty is Hyperbolic&lt;/h2&gt;
&lt;p&gt;Research and development projects are inherently unknowns. There may be some
data that indicates around doing small isolated tasks, but predicting a string
of tasks and how they will proceed from one another is not possible because as
predictions move out of the data centroid and extrapolate to larger projects and
longer time-frames the uncertainty explodes hyperbolically. Therefore better
predictions can only be made close to the data centroid centered on small atomic
tasks.&lt;/p&gt;
&lt;h2 id="humans-are-meta-cognitively-wired"&gt;Humans are Meta Cognitively Wired&lt;/h2&gt;
&lt;p&gt;Meta cognition is understanding about how we think, and we know a lot about how
we think we work.&lt;/p&gt;
&lt;h3 id="we-get-a-rush-from-checking-off-tasks-dopamine"&gt;We get a rush from checking off tasks. (Dopamine)&lt;/h3&gt;
&lt;p&gt;Using iterative project planning with shorter term iterations allows
contributors to feel more sense of accomplishment because they complete more
tasks, they receive recognition for completed work and have a clear sense of
expectations because data is explicit and meaningful. The feeling comes from
dopamine released each time we tick off a task.&lt;/p&gt;
&lt;h3 id="we-dislike-wasted-effort-endorphins"&gt;We dislike wasted effort. (Endorphins)&lt;/h3&gt;
&lt;p&gt;Only tasks are S.M.A.R.T.  Milestones, objectives and mission statements are
only loosely structured allowing teams to concentrate on the task at hand. By
spending less time planning out long-term objectives teams feel a strong sense
of purpose. Nothing is more aggravating than spending a long time planning
something only to have it switched around completely halfway through it. This
frustration leads ultimately to burnout and dysfunction. The corollary to this
is the excitement and morale boost of diving into work quickly and quickly
scoring small victories. Even a few small failures here are seen as positive
data toward the correct course of action because there isn’t a lot riding on
them. Working hard releases endorphins, which soothes anxiety and makes us feel
accomplished. A lack of endorphins however leads to anger and stress.&lt;/p&gt;
&lt;h3 id="we-are-more-productive-when-we-feel-self-directed-and-that-our-work-has-purpose-serotonin"&gt;We are more productive when we feel self-directed and that our work has purpose. (Serotonin)&lt;/h3&gt;
&lt;p&gt;Iterative project planning allows teams to be more productive with less oversite
since they participate in creating tasks and their current workload by taking
tasks from the backlog. Also by leverage Agile project management software to
organize tasks in iterations and calculate burndown, companies can allow
management to focus on the “Big Picture” giving the entire organization a
stronger sense of unity and focus. This sense of purpose and self-value comes
from serotonin released as we partake in planning our own work.&lt;/p&gt;
&lt;h3 id="we-like-to-work-in-groups-oxytocin"&gt;We like to work in groups. (Oxytocin)&lt;/h3&gt;
&lt;p&gt;Iterative project planning is inherently designed for groups. Working together
on a project build trust intimacy and ultimately synergy which multiply
productivity. Understanding and valuing each other’s strengths and weaknesses
makes us closer even in a professional setting. This releases oxytocin which
makes us feel appreciated and loved.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;IMHO iterative project planning is a no brainer for any research and development
group. It increases productivity while reducing costs by leveraging more
individual contributors and sharing leadership.&lt;/p&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;p&gt;Wikipedia Articles and Perspectives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hanselman.com/blog/OptimizeForTinyVictories.aspx"&gt;Optimize for tiny victories - Scott Hanselman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html"&gt;Agile is dead - Pragma Dave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_management"&gt;Agile Mangement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Agile Software Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Scrum (software development)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Kanban_(development)"&gt;Kanban (development)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Online Tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://trello.com/markmikofski/recommend"&gt;Trello planning tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pomelloapp.com/"&gt;Pomello app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scrumfortrello.com/"&gt;scrumfortrello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.burndownfortrello.com/"&gt;burndownfortrello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gantt-chart.com/"&gt;ganttify for Trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pivotaltracker.com/"&gt;Pivotal Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redbooth.com/"&gt;Redbooth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Productivity"></category><category term="agile"></category><category term="kanban"></category><category term="scrum"></category><category term="development"></category><category term="research"></category><category term="time-management"></category><category term="project-managment"></category><category term="project-planning"></category></entry><entry><title>Vertically Centered</title><link href="https://breakingbytes.github.io/vertically-centered.html" rel="alternate"></link><published>2017-05-25T23:48:00-07:00</published><updated>2017-05-25T23:48:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-05-25:/vertically-centered.html</id><summary type="html">&lt;p&gt;Use jQuery to vertically center an element in a window.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am porting a site, and the original login box would verticaly center, even as
I change the size of the window. There were several StackOverflow answers that
suggested creating a CSS class, which seemed perfect, but they didn't seem to
work. Then I noticed they had some JavaScript in their file to pad the top of
the login &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. I made some simplifications using jQuery and voila!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;Vertically&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;     &lt;span class="n"&gt;banner&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;banner&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;navbar&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;         &lt;span class="n"&gt;window&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;     &lt;span class="n"&gt;log_form&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;     &lt;span class="n"&gt;minht&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;separate&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;banner&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;jQuery&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s resize function.*/&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;set_login_form_container_margin_top&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minht&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;banner_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;banner&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;window_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;login_form_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;half&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;banner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window_height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;login_form_height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;banner_height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new_height = &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;new_height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;margin-top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minht&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;minht&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;new_height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use it on your web page with &lt;a href="https://api.jquery.com/resize/"&gt;jQuery's resize function&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/js/vertically_center.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  $(function(){
    set_login_form_container_margin_top(
        &amp;quot;#my_banner&amp;quot;,
        &amp;quot;#login-form-container&amp;quot;, 0);
  });
  $( window ).resize(function(){
    set_login_form_container_margin_top(
        &amp;quot;#my_banner&amp;quot;,
        &amp;quot;#login-form-container&amp;quot;, 0);
  });
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="JavaScript"></category><category term="HTML"></category><category term="web"></category><category term="jQuery"></category></entry><entry><title>Python-3 Virtual Environments on MS Windows</title><link href="https://breakingbytes.github.io/python-3-virtual-environments-on-ms-windows.html" rel="alternate"></link><published>2017-05-18T11:01:00-07:00</published><updated>2017-05-18T11:01:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-05-18:/python-3-virtual-environments-on-ms-windows.html</id><summary type="html">&lt;p&gt;Python-3 venv module vs virtualenv package&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a follow up from my &lt;a href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html"&gt;first post&lt;/a&gt;
on this new Pelican blog. I should have logged how I set up this, instead of
the glib cliché, "usage is a snap". Here I am posting for the second time, and
I'm wondering, "why didn't I just use the
&lt;a href="https://help.github.com/articles/about-github-pages-and-jekyll/"&gt;built in Jekyll static site generator&lt;/a&gt;?"&lt;/p&gt;
&lt;p&gt;Anyway, for posterity...&lt;/p&gt;
&lt;h1 id="publishing-to-gh-pages"&gt;Publishing to GH Pages&lt;/h1&gt;
&lt;p&gt;To publish my pages I use the &lt;code&gt;Makefile&lt;/code&gt; that Pelican generates when you start
your blog using &lt;code&gt;pelican-quickstart&lt;/code&gt;. I may have editted the &lt;code&gt;Makefile&lt;/code&gt; to
target my GitHub &lt;code&gt;master&lt;/code&gt; branch since I'm using
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#user-pages"&gt;User Pages&lt;/a&gt; or maybe
Pelican asked me during the quickstart questionnaire, I can't remember. The
&lt;code&gt;Makefile&lt;/code&gt; uses a handy tool called
&lt;a href="https://github.com/davisp/ghp-import"&gt;&lt;code&gt;ghp-import&lt;/code&gt;&lt;/a&gt; that copies the contents of
the output directory to the target git branch. Then the &lt;code&gt;Makefile&lt;/code&gt; publishes
the blog by pushing the target branch to GitHub. The &lt;code&gt;ghp-import&lt;/code&gt;
package is described a bit in the
&lt;a href="http://docs.getpelican.com/en/stable/tips.html#publishing-to-github"&gt;Pelican Tips&lt;/a&gt;
on publishing to GitHub pages, but the &lt;code&gt;Makefile&lt;/code&gt; takes care of calling it. So
all I have to do to publish my posts is execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could even stick it into &lt;code&gt;.git/hooks/post-commit&lt;/code&gt; to automate publishing.&lt;/p&gt;
&lt;h1 id="python-3-virtual-environment"&gt;Python-3 Virtual Environment&lt;/h1&gt;
&lt;p&gt;Okay, I can't remeber exactly the reason, but &lt;code&gt;ghp-import&lt;/code&gt; worked better in
Python-3 than Python-2, and so I created a virtual environment for Python-3.
This brings me finally to the title of this post. How does one create a virtual
environment for Python-3? Well according to the
&lt;a href="https://packaging.python.org/installing/#creating-virtual-environments"&gt;Python Packaging Authority (PyPA)&lt;/a&gt;
since Python-3.3 there is a built in module called
&lt;a href="https://docs.python.org/3.5/library/venv.html"&gt;&lt;code&gt;venv&lt;/code&gt;&lt;/a&gt;. However the venerable
&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt; package also works just
fine for Python-3.&lt;/p&gt;
&lt;p&gt;How do these packages differ? There is one major difference that really affects
me. The built in Python-3 &lt;code&gt;venv&lt;/code&gt; module only activates in MS Windows &lt;code&gt;CMD&lt;/code&gt;
terminal or PowerShell whereas Ian Bicking's indispensible &lt;code&gt;virtualenv&lt;/code&gt; package
works in BaSH as well. This is an issue with Python on MS Windows that I
encounter a lot, it's a PITA and breaks the whole concept of a common unified
experience regardless of user's platform. I should be able to use Python exactly
the same on any system with very minor exceptions. Since I tend to mostly
use BaSH, this means that to use the built in &lt;code&gt;venv&lt;/code&gt; module I have to
switch to a MS Windows &lt;code&gt;CMD&lt;/code&gt; shell. I guess it's not that big of a deal, but
since &lt;code&gt;virtualenv&lt;/code&gt; works fine with Python-3, I guess I'll stick with that.&lt;/p&gt;
&lt;p&gt;Okay, there's also one other important difference. Python-3 installs all of its
shared objects into the virtual environment, which is different from Python-2
which uses links mostly. This means that when you update your version of
Python-3 you need to &lt;em&gt;also&lt;/em&gt; update your virtual environment.&lt;/p&gt;
&lt;p&gt;For the &lt;code&gt;virtualenv&lt;/code&gt; package you'll have to create a new virtual environment on
top of the old one. But for the built in &lt;code&gt;venv&lt;/code&gt; module you can just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -3 -m venv --upgrade &amp;lt;my-py3-venv&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;&amp;lt;my-py3-venv&amp;gt;&lt;/code&gt; is the name of your Python-3 virtual environment. I think
the source code for both are nearly the same, and I also think that under the
hood the &lt;code&gt;--upgrade&lt;/code&gt; option is really doing exactly the same thing as
&lt;code&gt;virtualenv&lt;/code&gt;, the difference is that if you try to create a virtual environment
on top of an existing one with the Python-3 &lt;code&gt;venv&lt;/code&gt; module is will raise an
exception.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Changed in version 3.4: In earlier versions, if the target directory already
existed, an error was raised, unless the &lt;code&gt;--clear&lt;/code&gt; or &lt;code&gt;--upgrade&lt;/code&gt; option was
provided. Now, if an existing directory is specified, its contents are removed
and the directory is processed as if it had been newly created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In conclusion, I don't see much difference between the two methods. So if you
want to use BaSH on MS Windows, stick with the original, otherwise try the new.&lt;/p&gt;</content><category term="Python"></category><category term="virtualenv"></category><category term="pelican"></category><category term="windows"></category><category term="bash"></category><category term="rant"></category></entry><entry><title>Moving to Pelican at GitHub Pages</title><link href="https://breakingbytes.github.io/moving-to-pelican-at-github-pages.html" rel="alternate"></link><published>2017-04-03T13:02:00-07:00</published><updated>2017-04-03T13:02:00-07:00</updated><author><name>Mark Mikofski</name></author><id>tag:breakingbytes.github.io,2017-04-03:/moving-to-pelican-at-github-pages.html</id><summary type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So this is goodbye to Google Blogger and my old blog at
&lt;a href="http://poquitopicante.blogspot.com/"&gt;Poquito Picante&lt;/a&gt;, although I'll try to
keep &lt;a href="https://breakingbytes.blogspot.com/"&gt;Breaking Bytes&lt;/a&gt; up to date if I can
figure out how to make a commit hook that posts the generated content using the
&lt;a href="https://developers.google.com/blogger/"&gt;Blogger API v3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is hello to &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;! I did a very quick
&lt;a href="https://www.fullstackpython.com/static-site-generator.html"&gt;search for static site generators&lt;/a&gt;
like Pelican, Hyde and a few others, and Pelican quickly emerged as the most
popular. &lt;a href="https://news.ycombinator.com/item?id=4928719"&gt;Also Kenneth Reitz said to use it.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So far Pelican usage is a snap, just follow
&lt;a href="http://docs.getpelican.com/en/stable/index.html"&gt;the quickstart in their documentation&lt;/a&gt;.
So this is my very first, albeit very short, post for my new blog site. Why leave
Google Blogger?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've wanted to for a very long time, b/c I wanted to manage my blog using
  Git.&lt;/li&gt;
&lt;li&gt;My old blog is now being crawled every few hours which just seems weird.&lt;/li&gt;
&lt;li&gt;I prefer my &lt;code&gt;breakingbytes&lt;/code&gt; handle to "Poquito Picante" which is just a
  silly alliteration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info about me please visit &lt;a href="https://mikofski.github.io/"&gt;me here&lt;/a&gt;.&lt;/p&gt;</content><category term="Announcements"></category></entry></feed>